wandb: Currently logged in as: hrmussa. Use `wandb login --relogin` to force relogin
wandb: Tracking run with wandb version 0.12.21
wandb: Run data is saved locally in /home/agmo/DaClinNLP/wandb/run-20220724_223122-3pruvycy
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run radiant-durian-15
wandb: ‚≠êÔ∏è View project at https://wandb.ai/hrmussa/icd_coding
wandb: üöÄ View run at https://wandb.ai/hrmussa/icd_coding/runs/3pruvycy
Some weights of the model checkpoint at Geotrend/distilbert-base-da-cased were not used when initializing DistilBertModel: ['vocab_transform.weight', 'vocab_layer_norm.weight', 'vocab_projector.weight', 'vocab_projector.bias', 'vocab_transform.bias', 'vocab_layer_norm.bias']
- This IS expected if you are initializing DistilBertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing DistilBertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
[34m[1mwandb[0m: logging graph, to disable use `wandb.watch(log_graph=False)`
Using device: cuda
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<00:56,  1.24it/s]  3% 2/71 [00:01<01:06,  1.04it/s]  4% 3/71 [00:02<00:54,  1.24it/s]  6% 4/71 [00:03<01:00,  1.12it/s]  7% 5/71 [00:04<00:52,  1.27it/s]  8% 6/71 [00:05<00:56,  1.15it/s] 10% 7/71 [00:05<00:49,  1.30it/s] 11% 8/71 [00:06<00:52,  1.19it/s] 13% 9/71 [00:07<00:46,  1.33it/s] 14% 10/71 [00:08<00:49,  1.23it/s] 15% 11/71 [00:08<00:43,  1.38it/s] 17% 12/71 [00:09<00:46,  1.27it/s] 18% 13/71 [00:10<00:41,  1.41it/s] 20% 14/71 [00:11<00:44,  1.28it/s] 21% 15/71 [00:11<00:39,  1.42it/s] 23% 16/71 [00:12<00:42,  1.31it/s] 24% 17/71 [00:13<00:36,  1.46it/s] 25% 18/71 [00:13<00:39,  1.34it/s] 27% 19/71 [00:14<00:34,  1.49it/s] 28% 20/71 [00:15<00:37,  1.36it/s] 30% 21/71 [00:15<00:33,  1.50it/s] 31% 22/71 [00:16<00:36,  1.35it/s] 32% 23/71 [00:17<00:32,  1.48it/s] 34% 24/71 [00:18<00:34,  1.35it/s] 35% 25/71 [00:18<00:31,  1.48it/s] 37% 26/71 [00:19<00:33,  1.34it/s] 38% 27/71 [00:20<00:29,  1.48it/s] 39% 28/71 [00:21<00:32,  1.34it/s] 41% 29/71 [00:21<00:28,  1.48it/s] 42% 30/71 [00:22<00:30,  1.33it/s] 44% 31/71 [00:22<00:27,  1.47it/s] 45% 32/71 [00:23<00:29,  1.34it/s] 46% 33/71 [00:24<00:25,  1.47it/s] 48% 34/71 [00:25<00:27,  1.34it/s] 49% 35/71 [00:25<00:24,  1.49it/s] 51% 36/71 [00:26<00:26,  1.34it/s] 52% 37/71 [00:27<00:22,  1.49it/s] 54% 38/71 [00:28<00:24,  1.35it/s] 55% 39/71 [00:28<00:21,  1.50it/s] 56% 40/71 [00:29<00:23,  1.34it/s] 58% 41/71 [00:30<00:20,  1.48it/s] 59% 42/71 [00:30<00:21,  1.34it/s] 61% 43/71 [00:31<00:18,  1.48it/s] 62% 44/71 [00:32<00:20,  1.34it/s] 63% 45/71 [00:32<00:17,  1.49it/s] 65% 46/71 [00:33<00:18,  1.35it/s] 66% 47/71 [00:34<00:16,  1.49it/s] 68% 48/71 [00:35<00:17,  1.35it/s] 69% 49/71 [00:35<00:14,  1.49it/s] 70% 50/71 [00:36<00:15,  1.35it/s] 72% 51/71 [00:37<00:13,  1.49it/s] 73% 52/71 [00:38<00:13,  1.36it/s] 75% 53/71 [00:38<00:11,  1.51it/s] 76% 54/71 [00:39<00:12,  1.36it/s] 77% 55/71 [00:39<00:10,  1.51it/s] 79% 56/71 [00:40<00:11,  1.35it/s] 80% 57/71 [00:41<00:09,  1.50it/s] 82% 58/71 [00:42<00:09,  1.36it/s] 83% 59/71 [00:42<00:08,  1.49it/s] 85% 60/71 [00:43<00:08,  1.36it/s] 86% 61/71 [00:44<00:06,  1.50it/s] 87% 62/71 [00:45<00:06,  1.35it/s] 89% 63/71 [00:45<00:05,  1.50it/s] 90% 64/71 [00:46<00:05,  1.36it/s] 92% 65/71 [00:46<00:03,  1.50it/s] 93% 66/71 [00:47<00:03,  1.35it/s] 94% 67/71 [00:48<00:02,  1.50it/s] 96% 68/71 [00:49<00:02,  1.36it/s] 97% 69/71 [00:49<00:01,  1.50it/s] 99% 70/71 [00:50<00:00,  1.36it/s]100% 71/71 [00:50<00:00,  1.70it/s]100% 71/71 [00:50<00:00,  1.40it/s]
/home/agmo/.conda/envs/clinnlp/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1327: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/home/agmo/.conda/envs/clinnlp/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1327: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/home/agmo/.conda/envs/clinnlp/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1327: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<01:03,  1.09it/s]  3% 2/71 [00:01<00:46,  1.47it/s]  4% 3/71 [00:02<00:53,  1.27it/s]  6% 4/71 [00:02<00:45,  1.47it/s]  7% 5/71 [00:03<00:51,  1.29it/s]  8% 6/71 [00:04<00:44,  1.47it/s] 10% 7/71 [00:05<00:48,  1.33it/s] 11% 8/71 [00:05<00:42,  1.48it/s] 13% 9/71 [00:06<00:46,  1.34it/s] 14% 10/71 [00:07<00:41,  1.48it/s] 15% 11/71 [00:08<00:44,  1.35it/s] 17% 12/71 [00:08<00:39,  1.49it/s] 18% 13/71 [00:09<00:42,  1.35it/s] 20% 14/71 [00:09<00:38,  1.50it/s] 21% 15/71 [00:10<00:41,  1.37it/s] 23% 16/71 [00:11<00:36,  1.50it/s] 24% 17/71 [00:12<00:39,  1.35it/s] 25% 18/71 [00:12<00:35,  1.50it/s] 27% 19/71 [00:13<00:38,  1.36it/s] 28% 20/71 [00:14<00:33,  1.51it/s] 30% 21/71 [00:15<00:36,  1.36it/s] 31% 22/71 [00:15<00:32,  1.50it/s] 32% 23/71 [00:16<00:35,  1.35it/s] 34% 24/71 [00:16<00:31,  1.50it/s] 35% 25/71 [00:17<00:34,  1.35it/s] 37% 26/71 [00:18<00:30,  1.49it/s] 38% 27/71 [00:19<00:32,  1.35it/s] 39% 28/71 [00:19<00:28,  1.49it/s] 41% 29/71 [00:20<00:31,  1.33it/s] 42% 30/71 [00:21<00:27,  1.48it/s] 44% 31/71 [00:22<00:30,  1.33it/s] 45% 32/71 [00:22<00:26,  1.47it/s] 46% 33/71 [00:23<00:28,  1.34it/s] 48% 34/71 [00:24<00:24,  1.48it/s] 49% 35/71 [00:24<00:26,  1.35it/s] 51% 36/71 [00:25<00:23,  1.49it/s] 52% 37/71 [00:26<00:25,  1.35it/s] 54% 38/71 [00:26<00:21,  1.50it/s] 55% 39/71 [00:27<00:23,  1.37it/s] 56% 40/71 [00:28<00:20,  1.51it/s] 58% 41/71 [00:29<00:21,  1.37it/s] 59% 42/71 [00:29<00:19,  1.50it/s] 61% 43/71 [00:30<00:20,  1.34it/s] 62% 44/71 [00:31<00:18,  1.49it/s] 63% 45/71 [00:31<00:19,  1.35it/s] 65% 46/71 [00:32<00:16,  1.50it/s] 66% 47/71 [00:33<00:17,  1.36it/s] 68% 48/71 [00:33<00:15,  1.51it/s] 69% 49/71 [00:34<00:15,  1.38it/s] 70% 50/71 [00:35<00:13,  1.51it/s] 72% 51/71 [00:36<00:15,  1.32it/s] 73% 52/71 [00:36<00:12,  1.46it/s] 75% 53/71 [00:37<00:13,  1.34it/s] 76% 54/71 [00:38<00:11,  1.48it/s] 77% 55/71 [00:39<00:11,  1.35it/s] 79% 56/71 [00:39<00:10,  1.49it/s] 80% 57/71 [00:40<00:10,  1.35it/s] 82% 58/71 [00:40<00:08,  1.49it/s] 83% 59/71 [00:41<00:08,  1.36it/s] 85% 60/71 [00:42<00:07,  1.50it/s] 86% 61/71 [00:43<00:07,  1.33it/s] 87% 62/71 [00:43<00:06,  1.48it/s] 89% 63/71 [00:44<00:05,  1.35it/s] 90% 64/71 [00:45<00:04,  1.48it/s] 92% 65/71 [00:46<00:04,  1.34it/s] 93% 66/71 [00:46<00:03,  1.48it/s] 94% 67/71 [00:47<00:02,  1.35it/s] 96% 68/71 [00:48<00:02,  1.50it/s] 97% 69/71 [00:48<00:01,  1.35it/s] 99% 70/71 [00:49<00:00,  1.49it/s]100% 71/71 [00:50<00:00,  1.51it/s]100% 71/71 [00:50<00:00,  1.42it/s]
/home/agmo/.conda/envs/clinnlp/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1327: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/home/agmo/.conda/envs/clinnlp/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1327: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/home/agmo/.conda/envs/clinnlp/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1327: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<00:35,  1.98it/s]  3% 2/71 [00:01<00:51,  1.33it/s]  4% 3/71 [00:01<00:43,  1.56it/s]  6% 4/71 [00:02<00:49,  1.35it/s]  7% 5/71 [00:03<00:43,  1.51it/s]  8% 6/71 [00:04<00:48,  1.35it/s] 10% 7/71 [00:04<00:42,  1.50it/s] 11% 8/71 [00:05<00:46,  1.35it/s] 13% 9/71 [00:06<00:41,  1.50it/s] 14% 10/71 [00:07<00:44,  1.36it/s] 15% 11/71 [00:07<00:40,  1.50it/s] 17% 12/71 [00:08<00:44,  1.34it/s] 18% 13/71 [00:08<00:39,  1.49it/s] 20% 14/71 [00:09<00:42,  1.33it/s] 21% 15/71 [00:10<00:38,  1.47it/s] 23% 16/71 [00:11<00:40,  1.34it/s] 24% 17/71 [00:11<00:36,  1.49it/s] 25% 18/71 [00:12<00:39,  1.34it/s] 27% 19/71 [00:13<00:34,  1.49it/s] 28% 20/71 [00:14<00:37,  1.35it/s] 30% 21/71 [00:14<00:33,  1.50it/s] 31% 22/71 [00:15<00:35,  1.37it/s] 32% 23/71 [00:16<00:31,  1.52it/s] 34% 24/71 [00:16<00:34,  1.38it/s] 35% 25/71 [00:17<00:30,  1.52it/s] 37% 26/71 [00:18<00:32,  1.38it/s] 38% 27/71 [00:18<00:28,  1.53it/s] 39% 28/71 [00:19<00:31,  1.38it/s] 41% 29/71 [00:20<00:27,  1.53it/s] 42% 30/71 [00:21<00:29,  1.38it/s] 44% 31/71 [00:21<00:26,  1.53it/s] 45% 32/71 [00:22<00:28,  1.38it/s] 46% 33/71 [00:22<00:25,  1.52it/s] 48% 34/71 [00:23<00:26,  1.37it/s] 49% 35/71 [00:24<00:23,  1.51it/s] 51% 36/71 [00:25<00:25,  1.37it/s] 52% 37/71 [00:25<00:22,  1.50it/s] 54% 38/71 [00:26<00:24,  1.37it/s] 55% 39/71 [00:27<00:21,  1.50it/s] 56% 40/71 [00:28<00:22,  1.35it/s] 58% 41/71 [00:28<00:20,  1.49it/s] 59% 42/71 [00:29<00:21,  1.35it/s] 61% 43/71 [00:29<00:18,  1.49it/s] 62% 44/71 [00:30<00:20,  1.35it/s] 63% 45/71 [00:31<00:17,  1.49it/s] 65% 46/71 [00:32<00:18,  1.35it/s] 66% 47/71 [00:32<00:16,  1.49it/s] 68% 48/71 [00:33<00:16,  1.35it/s] 69% 49/71 [00:34<00:14,  1.49it/s] 70% 50/71 [00:35<00:15,  1.35it/s] 72% 51/71 [00:35<00:13,  1.48it/s] 73% 52/71 [00:36<00:14,  1.35it/s] 75% 53/71 [00:37<00:12,  1.49it/s] 76% 54/71 [00:37<00:12,  1.35it/s] 77% 55/71 [00:38<00:10,  1.49it/s] 79% 56/71 [00:39<00:11,  1.36it/s] 80% 57/71 [00:39<00:09,  1.49it/s] 82% 58/71 [00:40<00:09,  1.36it/s] 83% 59/71 [00:41<00:07,  1.50it/s] 85% 60/71 [00:42<00:08,  1.35it/s] 86% 61/71 [00:42<00:06,  1.49it/s] 87% 62/71 [00:43<00:06,  1.35it/s] 89% 63/71 [00:44<00:05,  1.49it/s] 90% 64/71 [00:44<00:05,  1.35it/s] 92% 65/71 [00:45<00:04,  1.50it/s] 93% 66/71 [00:46<00:03,  1.35it/s] 94% 67/71 [00:46<00:02,  1.50it/s] 96% 68/71 [00:47<00:02,  1.35it/s] 97% 69/71 [00:48<00:01,  1.50it/s] 99% 70/71 [00:49<00:00,  1.36it/s]100% 71/71 [00:49<00:00,  1.69it/s]100% 71/71 [00:49<00:00,  1.44it/s]
/home/agmo/.conda/envs/clinnlp/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1327: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/home/agmo/.conda/envs/clinnlp/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1327: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/home/agmo/.conda/envs/clinnlp/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1327: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<01:00,  1.16it/s]  3% 2/71 [00:01<00:44,  1.55it/s]  4% 3/71 [00:02<00:51,  1.33it/s]  6% 4/71 [00:02<00:43,  1.52it/s]  7% 5/71 [00:03<00:49,  1.35it/s]  8% 6/71 [00:04<00:43,  1.50it/s] 10% 7/71 [00:05<00:48,  1.32it/s] 11% 8/71 [00:05<00:42,  1.47it/s] 13% 9/71 [00:06<00:46,  1.33it/s] 14% 10/71 [00:07<00:41,  1.47it/s] 15% 11/71 [00:07<00:44,  1.35it/s] 17% 12/71 [00:08<00:39,  1.49it/s] 18% 13/71 [00:09<00:42,  1.35it/s] 20% 14/71 [00:09<00:38,  1.49it/s] 21% 15/71 [00:10<00:41,  1.35it/s] 23% 16/71 [00:11<00:36,  1.50it/s] 24% 17/71 [00:12<00:39,  1.35it/s] 25% 18/71 [00:12<00:35,  1.50it/s] 27% 19/71 [00:13<00:37,  1.37it/s] 28% 20/71 [00:14<00:33,  1.51it/s] 30% 21/71 [00:14<00:36,  1.36it/s] 31% 22/71 [00:15<00:32,  1.50it/s] 32% 23/71 [00:16<00:35,  1.36it/s] 34% 24/71 [00:16<00:31,  1.50it/s] 35% 25/71 [00:17<00:33,  1.37it/s] 37% 26/71 [00:18<00:29,  1.51it/s] 38% 27/71 [00:19<00:32,  1.36it/s] 39% 28/71 [00:19<00:28,  1.50it/s] 41% 29/71 [00:20<00:31,  1.35it/s] 42% 30/71 [00:21<00:27,  1.48it/s] 44% 31/71 [00:21<00:29,  1.35it/s] 45% 32/71 [00:22<00:26,  1.48it/s] 46% 33/71 [00:23<00:28,  1.35it/s] 48% 34/71 [00:23<00:24,  1.49it/s] 49% 35/71 [00:24<00:26,  1.35it/s] 51% 36/71 [00:25<00:23,  1.50it/s] 52% 37/71 [00:26<00:24,  1.36it/s] 54% 38/71 [00:26<00:22,  1.49it/s] 55% 39/71 [00:27<00:23,  1.36it/s] 56% 40/71 [00:28<00:20,  1.50it/s] 58% 41/71 [00:28<00:21,  1.36it/s] 59% 42/71 [00:29<00:19,  1.51it/s] 61% 43/71 [00:30<00:20,  1.36it/s] 62% 44/71 [00:30<00:17,  1.51it/s] 63% 45/71 [00:31<00:19,  1.37it/s] 65% 46/71 [00:32<00:16,  1.51it/s] 66% 47/71 [00:33<00:17,  1.37it/s] 68% 48/71 [00:33<00:15,  1.52it/s] 69% 49/71 [00:34<00:16,  1.37it/s] 70% 50/71 [00:35<00:13,  1.52it/s] 72% 51/71 [00:35<00:14,  1.38it/s] 73% 52/71 [00:36<00:12,  1.52it/s] 75% 53/71 [00:37<00:13,  1.38it/s] 76% 54/71 [00:37<00:11,  1.53it/s] 77% 55/71 [00:38<00:11,  1.37it/s] 79% 56/71 [00:39<00:09,  1.51it/s] 80% 57/71 [00:40<00:10,  1.37it/s] 82% 58/71 [00:40<00:08,  1.52it/s] 83% 59/71 [00:41<00:08,  1.38it/s] 85% 60/71 [00:41<00:07,  1.52it/s] 86% 61/71 [00:42<00:07,  1.36it/s] 87% 62/71 [00:43<00:06,  1.49it/s] 89% 63/71 [00:44<00:05,  1.36it/s] 90% 64/71 [00:44<00:04,  1.49it/s] 92% 65/71 [00:45<00:04,  1.35it/s] 93% 66/71 [00:46<00:03,  1.49it/s] 94% 67/71 [00:47<00:02,  1.35it/s] 96% 68/71 [00:47<00:02,  1.50it/s] 97% 69/71 [00:48<00:01,  1.36it/s] 99% 70/71 [00:49<00:00,  1.50it/s]100% 71/71 [00:49<00:00,  1.53it/s]100% 71/71 [00:49<00:00,  1.43it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<00:35,  1.99it/s]  3% 2/71 [00:01<00:50,  1.36it/s]  4% 3/71 [00:01<00:42,  1.58it/s]  6% 4/71 [00:02<00:50,  1.33it/s]  7% 5/71 [00:03<00:44,  1.50it/s]  8% 6/71 [00:04<00:49,  1.32it/s] 10% 7/71 [00:04<00:43,  1.48it/s] 11% 8/71 [00:05<00:46,  1.34it/s] 13% 9/71 [00:06<00:41,  1.49it/s] 14% 10/71 [00:07<00:45,  1.34it/s] 15% 11/71 [00:07<00:40,  1.48it/s] 17% 12/71 [00:08<00:43,  1.34it/s] 18% 13/71 [00:09<00:39,  1.48it/s] 20% 14/71 [00:09<00:42,  1.35it/s] 21% 15/71 [00:10<00:37,  1.48it/s] 23% 16/71 [00:11<00:40,  1.35it/s] 24% 17/71 [00:11<00:36,  1.50it/s] 25% 18/71 [00:12<00:39,  1.36it/s] 27% 19/71 [00:13<00:34,  1.49it/s] 28% 20/71 [00:14<00:38,  1.34it/s] 30% 21/71 [00:14<00:33,  1.48it/s] 31% 22/71 [00:15<00:36,  1.35it/s] 32% 23/71 [00:16<00:32,  1.48it/s] 34% 24/71 [00:17<00:35,  1.33it/s] 35% 25/71 [00:17<00:31,  1.47it/s] 37% 26/71 [00:18<00:33,  1.33it/s] 38% 27/71 [00:19<00:29,  1.47it/s] 39% 28/71 [00:19<00:32,  1.33it/s] 41% 29/71 [00:20<00:28,  1.47it/s] 42% 30/71 [00:21<00:30,  1.34it/s] 44% 31/71 [00:21<00:27,  1.48it/s] 45% 32/71 [00:22<00:29,  1.34it/s] 46% 33/71 [00:23<00:25,  1.48it/s] 48% 34/71 [00:24<00:27,  1.35it/s] 49% 35/71 [00:24<00:24,  1.48it/s] 51% 36/71 [00:25<00:25,  1.35it/s] 52% 37/71 [00:26<00:22,  1.49it/s] 54% 38/71 [00:26<00:24,  1.35it/s] 55% 39/71 [00:27<00:21,  1.48it/s] 56% 40/71 [00:28<00:22,  1.35it/s] 58% 41/71 [00:28<00:20,  1.49it/s] 59% 42/71 [00:29<00:21,  1.34it/s] 61% 43/71 [00:30<00:18,  1.49it/s] 62% 44/71 [00:31<00:19,  1.36it/s] 63% 45/71 [00:31<00:17,  1.51it/s] 65% 46/71 [00:32<00:18,  1.37it/s] 66% 47/71 [00:33<00:15,  1.51it/s] 68% 48/71 [00:33<00:16,  1.37it/s] 69% 49/71 [00:34<00:14,  1.52it/s] 70% 50/71 [00:35<00:15,  1.37it/s] 72% 51/71 [00:35<00:13,  1.51it/s] 73% 52/71 [00:36<00:13,  1.37it/s] 75% 53/71 [00:37<00:11,  1.51it/s] 76% 54/71 [00:38<00:12,  1.36it/s] 77% 55/71 [00:38<00:10,  1.49it/s] 79% 56/71 [00:39<00:11,  1.35it/s] 80% 57/71 [00:40<00:09,  1.49it/s] 82% 58/71 [00:40<00:09,  1.35it/s] 83% 59/71 [00:41<00:08,  1.49it/s] 85% 60/71 [00:42<00:08,  1.34it/s] 86% 61/71 [00:42<00:06,  1.48it/s] 87% 62/71 [00:43<00:06,  1.33it/s] 89% 63/71 [00:44<00:05,  1.46it/s] 90% 64/71 [00:45<00:05,  1.32it/s] 92% 65/71 [00:45<00:04,  1.46it/s] 93% 66/71 [00:46<00:03,  1.34it/s] 94% 67/71 [00:47<00:02,  1.48it/s] 96% 68/71 [00:48<00:02,  1.34it/s] 97% 69/71 [00:48<00:01,  1.49it/s] 99% 70/71 [00:49<00:00,  1.35it/s]100% 71/71 [00:49<00:00,  1.70it/s]100% 71/71 [00:49<00:00,  1.43it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<01:03,  1.10it/s]  3% 2/71 [00:01<00:46,  1.49it/s]  4% 3/71 [00:02<00:52,  1.29it/s]  6% 4/71 [00:02<00:45,  1.48it/s]  7% 5/71 [00:03<00:50,  1.31it/s]  8% 6/71 [00:04<00:43,  1.48it/s] 10% 7/71 [00:05<00:49,  1.30it/s] 11% 8/71 [00:05<00:43,  1.45it/s] 13% 9/71 [00:06<00:47,  1.31it/s] 14% 10/71 [00:07<00:41,  1.45it/s] 15% 11/71 [00:08<00:45,  1.33it/s] 17% 12/71 [00:08<00:40,  1.47it/s] 18% 13/71 [00:09<00:43,  1.34it/s] 20% 14/71 [00:09<00:38,  1.49it/s] 21% 15/71 [00:10<00:41,  1.35it/s] 23% 16/71 [00:11<00:36,  1.50it/s] 24% 17/71 [00:12<00:39,  1.36it/s] 25% 18/71 [00:12<00:35,  1.49it/s] 27% 19/71 [00:13<00:38,  1.36it/s] 28% 20/71 [00:14<00:34,  1.49it/s] 30% 21/71 [00:15<00:36,  1.36it/s] 31% 22/71 [00:15<00:32,  1.50it/s] 32% 23/71 [00:16<00:35,  1.36it/s] 34% 24/71 [00:17<00:31,  1.50it/s] 35% 25/71 [00:17<00:34,  1.35it/s] 37% 26/71 [00:18<00:30,  1.49it/s] 38% 27/71 [00:19<00:32,  1.35it/s] 39% 28/71 [00:19<00:29,  1.48it/s] 41% 29/71 [00:20<00:32,  1.31it/s] 42% 30/71 [00:21<00:28,  1.46it/s] 44% 31/71 [00:22<00:30,  1.32it/s] 45% 32/71 [00:22<00:26,  1.46it/s] 46% 33/71 [00:23<00:28,  1.33it/s] 48% 34/71 [00:24<00:25,  1.47it/s] 49% 35/71 [00:25<00:26,  1.33it/s] 51% 36/71 [00:25<00:23,  1.47it/s] 52% 37/71 [00:26<00:25,  1.33it/s] 54% 38/71 [00:27<00:22,  1.47it/s] 55% 39/71 [00:27<00:24,  1.33it/s] 56% 40/71 [00:28<00:21,  1.47it/s] 58% 41/71 [00:29<00:22,  1.32it/s] 59% 42/71 [00:29<00:19,  1.46it/s] 61% 43/71 [00:30<00:21,  1.33it/s] 62% 44/71 [00:31<00:18,  1.47it/s] 63% 45/71 [00:32<00:19,  1.33it/s] 65% 46/71 [00:32<00:17,  1.47it/s] 66% 47/71 [00:33<00:17,  1.33it/s] 68% 48/71 [00:34<00:15,  1.47it/s] 69% 49/71 [00:35<00:16,  1.34it/s] 70% 50/71 [00:35<00:14,  1.48it/s] 72% 51/71 [00:36<00:14,  1.34it/s] 73% 52/71 [00:37<00:12,  1.48it/s] 75% 53/71 [00:37<00:13,  1.35it/s] 76% 54/71 [00:38<00:11,  1.48it/s] 77% 55/71 [00:39<00:11,  1.35it/s] 79% 56/71 [00:39<00:10,  1.48it/s] 80% 57/71 [00:40<00:10,  1.35it/s] 82% 58/71 [00:41<00:08,  1.49it/s] 83% 59/71 [00:42<00:08,  1.35it/s] 85% 60/71 [00:42<00:07,  1.49it/s] 86% 61/71 [00:43<00:07,  1.33it/s] 87% 62/71 [00:44<00:06,  1.47it/s] 89% 63/71 [00:45<00:05,  1.35it/s] 90% 64/71 [00:45<00:04,  1.49it/s] 92% 65/71 [00:46<00:04,  1.35it/s] 93% 66/71 [00:46<00:03,  1.49it/s] 94% 67/71 [00:47<00:02,  1.36it/s] 96% 68/71 [00:48<00:02,  1.50it/s] 97% 69/71 [00:49<00:01,  1.36it/s] 99% 70/71 [00:49<00:00,  1.50it/s]100% 71/71 [00:50<00:00,  1.52it/s]100% 71/71 [00:50<00:00,  1.41it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<00:35,  1.98it/s]  3% 2/71 [00:01<00:51,  1.34it/s]  4% 3/71 [00:01<00:43,  1.56it/s]  6% 4/71 [00:02<00:50,  1.32it/s]  7% 5/71 [00:03<00:44,  1.49it/s]  8% 6/71 [00:04<00:49,  1.31it/s] 10% 7/71 [00:04<00:43,  1.48it/s] 11% 8/71 [00:05<00:47,  1.34it/s] 13% 9/71 [00:06<00:41,  1.49it/s] 14% 10/71 [00:07<00:45,  1.35it/s] 15% 11/71 [00:07<00:40,  1.49it/s] 17% 12/71 [00:08<00:43,  1.35it/s] 18% 13/71 [00:09<00:38,  1.49it/s] 20% 14/71 [00:09<00:42,  1.35it/s] 21% 15/71 [00:10<00:37,  1.49it/s] 23% 16/71 [00:11<00:40,  1.35it/s] 24% 17/71 [00:11<00:36,  1.48it/s] 25% 18/71 [00:12<00:40,  1.32it/s] 27% 19/71 [00:13<00:35,  1.45it/s] 28% 20/71 [00:14<00:38,  1.34it/s] 30% 21/71 [00:14<00:33,  1.48it/s] 31% 22/71 [00:15<00:36,  1.33it/s] 32% 23/71 [00:16<00:32,  1.47it/s] 34% 24/71 [00:17<00:34,  1.35it/s] 35% 25/71 [00:17<00:31,  1.47it/s] 37% 26/71 [00:18<00:33,  1.34it/s] 38% 27/71 [00:19<00:29,  1.49it/s] 39% 28/71 [00:19<00:32,  1.34it/s] 41% 29/71 [00:20<00:28,  1.47it/s] 42% 30/71 [00:21<00:30,  1.34it/s] 44% 31/71 [00:21<00:27,  1.47it/s] 45% 32/71 [00:22<00:29,  1.34it/s] 46% 33/71 [00:23<00:25,  1.47it/s] 48% 34/71 [00:24<00:27,  1.33it/s] 49% 35/71 [00:24<00:24,  1.47it/s] 51% 36/71 [00:25<00:26,  1.34it/s] 52% 37/71 [00:26<00:23,  1.47it/s] 54% 38/71 [00:27<00:24,  1.33it/s] 55% 39/71 [00:27<00:21,  1.46it/s] 56% 40/71 [00:28<00:23,  1.34it/s] 58% 41/71 [00:29<00:20,  1.47it/s] 59% 42/71 [00:29<00:21,  1.34it/s] 61% 43/71 [00:30<00:18,  1.48it/s] 62% 44/71 [00:31<00:19,  1.35it/s] 63% 45/71 [00:31<00:17,  1.49it/s] 65% 46/71 [00:32<00:18,  1.35it/s] 66% 47/71 [00:33<00:16,  1.48it/s] 68% 48/71 [00:34<00:17,  1.35it/s] 69% 49/71 [00:34<00:14,  1.48it/s] 70% 50/71 [00:35<00:15,  1.35it/s] 72% 51/71 [00:36<00:13,  1.48it/s] 73% 52/71 [00:37<00:14,  1.35it/s] 75% 53/71 [00:37<00:12,  1.48it/s] 76% 54/71 [00:38<00:12,  1.33it/s] 77% 55/71 [00:38<00:10,  1.47it/s] 79% 56/71 [00:39<00:11,  1.34it/s] 80% 57/71 [00:40<00:09,  1.47it/s] 82% 58/71 [00:41<00:09,  1.33it/s] 83% 59/71 [00:41<00:08,  1.46it/s] 85% 60/71 [00:42<00:08,  1.33it/s] 86% 61/71 [00:43<00:06,  1.47it/s] 87% 62/71 [00:44<00:06,  1.32it/s] 89% 63/71 [00:44<00:05,  1.46it/s] 90% 64/71 [00:45<00:05,  1.33it/s] 92% 65/71 [00:46<00:04,  1.47it/s] 93% 66/71 [00:47<00:03,  1.33it/s] 94% 67/71 [00:47<00:02,  1.47it/s] 96% 68/71 [00:48<00:02,  1.34it/s] 97% 69/71 [00:48<00:01,  1.47it/s] 99% 70/71 [00:49<00:00,  1.35it/s]100% 71/71 [00:50<00:00,  1.68it/s]100% 71/71 [00:50<00:00,  1.42it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<01:03,  1.11it/s]  3% 2/71 [00:01<00:46,  1.49it/s]  4% 3/71 [00:02<00:52,  1.30it/s]  6% 4/71 [00:02<00:44,  1.50it/s]  7% 5/71 [00:03<00:49,  1.33it/s]  8% 6/71 [00:04<00:43,  1.49it/s] 10% 7/71 [00:05<00:47,  1.34it/s] 11% 8/71 [00:05<00:42,  1.48it/s] 13% 9/71 [00:06<00:46,  1.33it/s] 14% 10/71 [00:07<00:41,  1.48it/s] 15% 11/71 [00:07<00:44,  1.35it/s] 17% 12/71 [00:09<00:59,  1.01s/it] 18% 13/71 [00:10<00:57,  1.01it/s] 20% 14/71 [00:11<00:47,  1.19it/s] 21% 15/71 [00:11<00:48,  1.16it/s] 23% 16/71 [00:12<00:41,  1.32it/s] 24% 17/71 [00:13<00:43,  1.24it/s] 25% 18/71 [00:13<00:37,  1.40it/s] 27% 19/71 [00:14<00:40,  1.29it/s] 28% 20/71 [00:15<00:35,  1.43it/s] 30% 21/71 [00:16<00:38,  1.31it/s] 31% 22/71 [00:16<00:33,  1.45it/s] 32% 23/71 [00:17<00:36,  1.32it/s] 34% 24/71 [00:18<00:32,  1.46it/s] 35% 25/71 [00:19<00:34,  1.32it/s] 37% 26/71 [00:19<00:30,  1.46it/s] 38% 27/71 [00:20<00:33,  1.33it/s] 39% 28/71 [00:21<00:29,  1.46it/s] 41% 29/71 [00:21<00:31,  1.32it/s] 42% 30/71 [00:22<00:27,  1.47it/s] 44% 31/71 [00:23<00:30,  1.33it/s] 45% 32/71 [00:23<00:26,  1.47it/s] 46% 33/71 [00:24<00:28,  1.34it/s] 48% 34/71 [00:25<00:25,  1.48it/s] 49% 35/71 [00:26<00:27,  1.33it/s] 51% 36/71 [00:26<00:23,  1.46it/s] 52% 37/71 [00:27<00:25,  1.33it/s] 54% 38/71 [00:28<00:22,  1.46it/s] 55% 39/71 [00:29<00:24,  1.32it/s] 56% 40/71 [00:29<00:21,  1.45it/s] 58% 41/71 [00:30<00:22,  1.33it/s] 59% 42/71 [00:31<00:19,  1.47it/s] 61% 43/71 [00:31<00:21,  1.33it/s] 62% 44/71 [00:32<00:18,  1.46it/s] 63% 45/71 [00:33<00:19,  1.34it/s] 65% 46/71 [00:33<00:16,  1.48it/s] 66% 47/71 [00:34<00:17,  1.35it/s] 68% 48/71 [00:35<00:15,  1.49it/s] 69% 49/71 [00:36<00:16,  1.35it/s] 70% 50/71 [00:36<00:14,  1.48it/s] 72% 51/71 [00:37<00:14,  1.34it/s] 73% 52/71 [00:38<00:12,  1.47it/s] 75% 53/71 [00:39<00:13,  1.34it/s] 76% 54/71 [00:39<00:11,  1.48it/s] 77% 55/71 [00:40<00:11,  1.35it/s] 79% 56/71 [00:41<00:10,  1.48it/s] 80% 57/71 [00:41<00:10,  1.35it/s] 82% 58/71 [00:42<00:08,  1.48it/s] 83% 59/71 [00:43<00:08,  1.33it/s] 85% 60/71 [00:43<00:07,  1.47it/s] 86% 61/71 [00:44<00:07,  1.35it/s] 87% 62/71 [00:45<00:06,  1.48it/s] 89% 63/71 [00:46<00:06,  1.32it/s] 90% 64/71 [00:46<00:04,  1.45it/s] 92% 65/71 [00:47<00:04,  1.33it/s] 93% 66/71 [00:48<00:03,  1.47it/s] 94% 67/71 [00:49<00:03,  1.30it/s] 96% 68/71 [00:49<00:02,  1.44it/s] 97% 69/71 [00:50<00:01,  1.32it/s] 99% 70/71 [00:51<00:00,  1.45it/s]100% 71/71 [00:51<00:00,  1.49it/s]100% 71/71 [00:51<00:00,  1.37it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<00:36,  1.90it/s]  3% 2/71 [00:01<00:51,  1.34it/s]  4% 3/71 [00:01<00:43,  1.58it/s]  6% 4/71 [00:02<00:49,  1.34it/s]  7% 5/71 [00:03<00:43,  1.52it/s]  8% 6/71 [00:04<00:47,  1.36it/s] 10% 7/71 [00:04<00:42,  1.51it/s] 11% 8/71 [00:05<00:46,  1.36it/s] 13% 9/71 [00:06<00:41,  1.50it/s] 14% 10/71 [00:07<00:45,  1.35it/s] 15% 11/71 [00:07<00:40,  1.49it/s] 17% 12/71 [00:08<00:43,  1.35it/s] 18% 13/71 [00:09<00:39,  1.48it/s] 20% 14/71 [00:09<00:43,  1.32it/s] 21% 15/71 [00:10<00:38,  1.46it/s] 23% 16/71 [00:11<00:41,  1.33it/s] 24% 17/71 [00:11<00:36,  1.46it/s] 25% 18/71 [00:12<00:40,  1.32it/s] 27% 19/71 [00:13<00:35,  1.46it/s] 28% 20/71 [00:14<00:38,  1.33it/s] 30% 21/71 [00:14<00:33,  1.48it/s] 31% 22/71 [00:15<00:36,  1.35it/s] 32% 23/71 [00:16<00:32,  1.50it/s] 34% 24/71 [00:17<00:34,  1.36it/s] 35% 25/71 [00:17<00:30,  1.50it/s] 37% 26/71 [00:18<00:33,  1.36it/s] 38% 27/71 [00:18<00:29,  1.50it/s] 39% 28/71 [00:19<00:31,  1.36it/s] 41% 29/71 [00:20<00:28,  1.49it/s] 42% 30/71 [00:21<00:30,  1.35it/s] 44% 31/71 [00:21<00:26,  1.48it/s] 45% 32/71 [00:22<00:28,  1.35it/s] 46% 33/71 [00:23<00:25,  1.48it/s] 48% 34/71 [00:24<00:27,  1.34it/s] 49% 35/71 [00:24<00:24,  1.48it/s] 51% 36/71 [00:25<00:26,  1.34it/s] 52% 37/71 [00:26<00:22,  1.49it/s] 54% 38/71 [00:26<00:24,  1.35it/s] 55% 39/71 [00:27<00:21,  1.48it/s] 56% 40/71 [00:28<00:23,  1.34it/s] 58% 41/71 [00:28<00:20,  1.47it/s] 59% 42/71 [00:29<00:21,  1.35it/s] 61% 43/71 [00:30<00:18,  1.48it/s] 62% 44/71 [00:31<00:20,  1.34it/s] 63% 45/71 [00:31<00:17,  1.47it/s] 65% 46/71 [00:32<00:18,  1.33it/s] 66% 47/71 [00:33<00:16,  1.48it/s] 68% 48/71 [00:34<00:17,  1.35it/s] 69% 49/71 [00:34<00:14,  1.48it/s] 70% 50/71 [00:35<00:15,  1.34it/s] 72% 51/71 [00:35<00:13,  1.47it/s] 73% 52/71 [00:36<00:14,  1.33it/s] 75% 53/71 [00:37<00:12,  1.47it/s] 76% 54/71 [00:38<00:12,  1.32it/s] 77% 55/71 [00:38<00:10,  1.46it/s] 79% 56/71 [00:39<00:11,  1.33it/s] 80% 57/71 [00:40<00:09,  1.47it/s] 82% 58/71 [00:41<00:09,  1.33it/s] 83% 59/71 [00:41<00:08,  1.46it/s] 85% 60/71 [00:42<00:08,  1.34it/s] 86% 61/71 [00:43<00:06,  1.46it/s] 87% 62/71 [00:44<00:06,  1.32it/s] 89% 63/71 [00:44<00:05,  1.45it/s] 90% 64/71 [00:45<00:05,  1.31it/s] 92% 65/71 [00:46<00:04,  1.44it/s] 93% 66/71 [00:47<00:03,  1.32it/s] 94% 67/71 [00:47<00:02,  1.45it/s] 96% 68/71 [00:48<00:02,  1.32it/s] 97% 69/71 [00:48<00:01,  1.45it/s] 99% 70/71 [00:49<00:00,  1.33it/s]100% 71/71 [00:50<00:00,  1.66it/s]100% 71/71 [00:50<00:00,  1.42it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<01:03,  1.10it/s]  3% 2/71 [00:01<00:47,  1.46it/s]  4% 3/71 [00:02<00:53,  1.27it/s]  6% 4/71 [00:02<00:45,  1.46it/s]  7% 5/71 [00:03<00:50,  1.30it/s]  8% 6/71 [00:04<00:44,  1.46it/s] 10% 7/71 [00:05<00:48,  1.32it/s] 11% 8/71 [00:05<00:43,  1.46it/s] 13% 9/71 [00:06<00:47,  1.32it/s] 14% 10/71 [00:07<00:41,  1.46it/s] 15% 11/71 [00:08<00:45,  1.33it/s] 17% 12/71 [00:08<00:40,  1.47it/s] 18% 13/71 [00:09<00:43,  1.33it/s] 20% 14/71 [00:10<00:38,  1.47it/s] 21% 15/71 [00:10<00:41,  1.34it/s] 23% 16/71 [00:11<00:36,  1.49it/s] 24% 17/71 [00:12<00:40,  1.35it/s] 25% 18/71 [00:12<00:35,  1.48it/s] 27% 19/71 [00:13<00:38,  1.34it/s] 28% 20/71 [00:14<00:34,  1.47it/s] 30% 21/71 [00:15<00:37,  1.33it/s] 31% 22/71 [00:15<00:33,  1.46it/s] 32% 23/71 [00:16<00:36,  1.33it/s] 34% 24/71 [00:17<00:32,  1.45it/s] 35% 25/71 [00:18<00:34,  1.33it/s] 37% 26/71 [00:18<00:30,  1.47it/s] 38% 27/71 [00:19<00:33,  1.32it/s] 39% 28/71 [00:20<00:29,  1.46it/s] 41% 29/71 [00:20<00:31,  1.32it/s] 42% 30/71 [00:21<00:28,  1.44it/s] 44% 31/71 [00:22<00:30,  1.31it/s] 45% 32/71 [00:22<00:27,  1.44it/s] 46% 33/71 [00:23<00:28,  1.32it/s] 48% 34/71 [00:24<00:25,  1.45it/s] 49% 35/71 [00:25<00:27,  1.32it/s] 51% 36/71 [00:25<00:24,  1.45it/s] 52% 37/71 [00:26<00:25,  1.31it/s] 54% 38/71 [00:27<00:22,  1.45it/s] 55% 39/71 [00:28<00:24,  1.31it/s] 56% 40/71 [00:28<00:21,  1.45it/s] 58% 41/71 [00:29<00:22,  1.31it/s] 59% 42/71 [00:30<00:20,  1.45it/s] 61% 43/71 [00:31<00:21,  1.31it/s] 62% 44/71 [00:31<00:18,  1.44it/s] 63% 45/71 [00:32<00:19,  1.31it/s] 65% 46/71 [00:33<00:17,  1.44it/s] 66% 47/71 [00:34<00:18,  1.32it/s] 68% 48/71 [00:34<00:15,  1.45it/s] 69% 49/71 [00:35<00:16,  1.31it/s] 70% 50/71 [00:36<00:14,  1.45it/s] 72% 51/71 [00:37<00:15,  1.30it/s] 73% 52/71 [00:37<00:13,  1.43it/s] 75% 53/71 [00:38<00:13,  1.31it/s] 76% 54/71 [00:38<00:11,  1.44it/s] 77% 55/71 [00:39<00:12,  1.31it/s] 79% 56/71 [00:40<00:10,  1.44it/s] 80% 57/71 [00:41<00:10,  1.32it/s] 82% 58/71 [00:41<00:08,  1.44it/s] 83% 59/71 [00:42<00:09,  1.31it/s] 85% 60/71 [00:43<00:07,  1.44it/s] 86% 61/71 [00:44<00:07,  1.31it/s] 87% 62/71 [00:44<00:06,  1.43it/s] 89% 63/71 [00:45<00:06,  1.28it/s] 90% 64/71 [00:46<00:04,  1.42it/s] 92% 65/71 [00:47<00:04,  1.30it/s] 93% 66/71 [00:47<00:03,  1.44it/s] 94% 67/71 [00:48<00:03,  1.29it/s] 96% 68/71 [00:49<00:02,  1.43it/s] 97% 69/71 [00:50<00:01,  1.31it/s] 99% 70/71 [00:50<00:00,  1.44it/s]100% 71/71 [00:51<00:00,  1.48it/s]100% 71/71 [00:51<00:00,  1.38it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<00:36,  1.92it/s]  3% 2/71 [00:01<00:51,  1.33it/s]  4% 3/71 [00:01<00:44,  1.53it/s]  6% 4/71 [00:02<00:51,  1.30it/s]  7% 5/71 [00:03<00:44,  1.47it/s]  8% 6/71 [00:04<00:49,  1.32it/s] 10% 7/71 [00:04<00:43,  1.47it/s] 11% 8/71 [00:05<00:48,  1.30it/s] 13% 9/71 [00:06<00:42,  1.44it/s] 14% 10/71 [00:07<00:46,  1.32it/s] 15% 11/71 [00:07<00:41,  1.46it/s] 17% 12/71 [00:08<00:44,  1.32it/s] 18% 13/71 [00:09<00:39,  1.47it/s] 20% 14/71 [00:10<00:42,  1.34it/s] 21% 15/71 [00:10<00:38,  1.47it/s] 23% 16/71 [00:11<00:41,  1.34it/s] 24% 17/71 [00:12<00:36,  1.47it/s] 25% 18/71 [00:12<00:39,  1.34it/s] 27% 19/71 [00:13<00:35,  1.46it/s] 28% 20/71 [00:14<00:38,  1.33it/s] 30% 21/71 [00:14<00:34,  1.47it/s] 31% 22/71 [00:15<00:36,  1.33it/s] 32% 23/71 [00:16<00:32,  1.46it/s] 34% 24/71 [00:17<00:35,  1.34it/s] 35% 25/71 [00:17<00:31,  1.46it/s] 37% 26/71 [00:18<00:34,  1.32it/s] 38% 27/71 [00:19<00:30,  1.45it/s] 39% 28/71 [00:20<00:32,  1.32it/s] 41% 29/71 [00:20<00:29,  1.44it/s] 42% 30/71 [00:21<00:31,  1.32it/s] 44% 31/71 [00:22<00:27,  1.45it/s] 45% 32/71 [00:23<00:29,  1.32it/s] 46% 33/71 [00:23<00:26,  1.45it/s] 48% 34/71 [00:24<00:27,  1.33it/s] 49% 35/71 [00:25<00:24,  1.46it/s] 51% 36/71 [00:25<00:26,  1.32it/s] 52% 37/71 [00:26<00:23,  1.45it/s] 54% 38/71 [00:27<00:24,  1.33it/s] 55% 39/71 [00:27<00:21,  1.46it/s] 56% 40/71 [00:28<00:23,  1.32it/s] 58% 41/71 [00:29<00:20,  1.45it/s] 59% 42/71 [00:30<00:21,  1.32it/s] 61% 43/71 [00:30<00:19,  1.44it/s] 62% 44/71 [00:31<00:20,  1.31it/s] 63% 45/71 [00:32<00:17,  1.45it/s] 65% 46/71 [00:33<00:18,  1.34it/s] 66% 47/71 [00:33<00:16,  1.47it/s] 68% 48/71 [00:34<00:17,  1.34it/s] 69% 49/71 [00:35<00:14,  1.47it/s] 70% 50/71 [00:36<00:15,  1.32it/s] 72% 51/71 [00:36<00:13,  1.45it/s] 73% 52/71 [00:37<00:14,  1.31it/s] 75% 53/71 [00:38<00:12,  1.44it/s] 76% 54/71 [00:38<00:12,  1.31it/s] 77% 55/71 [00:39<00:11,  1.45it/s] 79% 56/71 [00:40<00:11,  1.33it/s] 80% 57/71 [00:40<00:09,  1.46it/s] 82% 58/71 [00:41<00:09,  1.30it/s] 83% 59/71 [00:42<00:08,  1.43it/s] 85% 60/71 [00:43<00:08,  1.31it/s] 86% 61/71 [00:43<00:06,  1.45it/s] 87% 62/71 [00:44<00:06,  1.32it/s] 89% 63/71 [00:45<00:05,  1.45it/s] 90% 64/71 [00:46<00:05,  1.32it/s] 92% 65/71 [00:46<00:04,  1.44it/s] 93% 66/71 [00:47<00:03,  1.32it/s] 94% 67/71 [00:48<00:02,  1.45it/s] 96% 68/71 [00:49<00:02,  1.33it/s] 97% 69/71 [00:49<00:01,  1.46it/s] 99% 70/71 [00:50<00:00,  1.33it/s]100% 71/71 [00:50<00:00,  1.67it/s]100% 71/71 [00:50<00:00,  1.40it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<01:03,  1.10it/s]  3% 2/71 [00:01<00:47,  1.44it/s]  4% 3/71 [00:02<00:54,  1.26it/s]  6% 4/71 [00:02<00:46,  1.45it/s]  7% 5/71 [00:03<00:51,  1.29it/s]  8% 6/71 [00:04<00:44,  1.45it/s] 10% 7/71 [00:05<00:48,  1.32it/s] 11% 8/71 [00:05<00:43,  1.46it/s] 13% 9/71 [00:06<00:46,  1.32it/s] 14% 10/71 [00:07<00:41,  1.46it/s] 15% 11/71 [00:08<00:45,  1.32it/s] 17% 12/71 [00:08<00:40,  1.45it/s] 18% 13/71 [00:09<00:44,  1.31it/s] 20% 14/71 [00:10<00:39,  1.44it/s] 21% 15/71 [00:11<00:42,  1.31it/s] 23% 16/71 [00:11<00:38,  1.44it/s] 24% 17/71 [00:12<00:41,  1.31it/s] 25% 18/71 [00:13<00:36,  1.45it/s] 27% 19/71 [00:13<00:39,  1.32it/s] 28% 20/71 [00:14<00:35,  1.45it/s] 30% 21/71 [00:15<00:38,  1.32it/s] 31% 22/71 [00:15<00:33,  1.45it/s] 32% 23/71 [00:16<00:36,  1.31it/s] 34% 24/71 [00:17<00:32,  1.45it/s] 35% 25/71 [00:18<00:35,  1.29it/s] 37% 26/71 [00:18<00:31,  1.42it/s] 38% 27/71 [00:19<00:34,  1.29it/s] 39% 28/71 [00:20<00:29,  1.43it/s] 41% 29/71 [00:21<00:32,  1.30it/s] 42% 30/71 [00:21<00:28,  1.42it/s] 44% 31/71 [00:22<00:30,  1.30it/s] 45% 32/71 [00:23<00:27,  1.43it/s] 46% 33/71 [00:24<00:29,  1.31it/s] 48% 34/71 [00:24<00:25,  1.44it/s] 49% 35/71 [00:25<00:27,  1.30it/s] 51% 36/71 [00:26<00:24,  1.43it/s] 52% 37/71 [00:27<00:26,  1.28it/s] 54% 38/71 [00:27<00:23,  1.41it/s] 55% 39/71 [00:28<00:24,  1.30it/s] 56% 40/71 [00:29<00:21,  1.43it/s] 58% 41/71 [00:30<00:22,  1.31it/s] 59% 42/71 [00:30<00:20,  1.45it/s] 61% 43/71 [00:31<00:21,  1.32it/s] 62% 44/71 [00:32<00:18,  1.45it/s] 63% 45/71 [00:32<00:19,  1.32it/s] 65% 46/71 [00:33<00:17,  1.46it/s] 66% 47/71 [00:34<00:18,  1.32it/s] 68% 48/71 [00:34<00:15,  1.46it/s] 69% 49/71 [00:35<00:16,  1.33it/s] 70% 50/71 [00:36<00:14,  1.46it/s] 72% 51/71 [00:37<00:15,  1.33it/s] 73% 52/71 [00:37<00:13,  1.45it/s] 75% 53/71 [00:38<00:13,  1.33it/s] 76% 54/71 [00:39<00:11,  1.46it/s] 77% 55/71 [00:40<00:12,  1.33it/s] 79% 56/71 [00:40<00:10,  1.45it/s] 80% 57/71 [00:41<00:10,  1.32it/s] 82% 58/71 [00:42<00:08,  1.45it/s] 83% 59/71 [00:43<00:09,  1.32it/s] 85% 60/71 [00:43<00:07,  1.44it/s] 86% 61/71 [00:44<00:07,  1.29it/s] 87% 62/71 [00:45<00:06,  1.42it/s] 89% 63/71 [00:46<00:06,  1.29it/s] 90% 64/71 [00:46<00:04,  1.42it/s] 92% 65/71 [00:47<00:04,  1.28it/s] 93% 66/71 [00:48<00:03,  1.42it/s] 94% 67/71 [00:48<00:03,  1.31it/s] 96% 68/71 [00:49<00:02,  1.44it/s] 97% 69/71 [00:50<00:01,  1.30it/s] 99% 70/71 [00:50<00:00,  1.44it/s]100% 71/71 [00:51<00:00,  1.46it/s]100% 71/71 [00:51<00:00,  1.37it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<00:36,  1.91it/s]  3% 2/71 [00:01<00:53,  1.30it/s]  4% 3/71 [00:01<00:44,  1.51it/s]  6% 4/71 [00:02<00:51,  1.31it/s]  7% 5/71 [00:03<00:44,  1.47it/s]  8% 6/71 [00:04<00:49,  1.31it/s] 10% 7/71 [00:04<00:43,  1.47it/s] 11% 8/71 [00:05<00:48,  1.31it/s] 13% 9/71 [00:06<00:42,  1.45it/s] 14% 10/71 [00:07<00:46,  1.32it/s] 15% 11/71 [00:07<00:41,  1.46it/s] 17% 12/71 [00:08<00:44,  1.32it/s] 18% 13/71 [00:09<00:39,  1.46it/s] 20% 14/71 [00:10<00:43,  1.32it/s] 21% 15/71 [00:10<00:38,  1.47it/s] 23% 16/71 [00:11<00:41,  1.32it/s] 24% 17/71 [00:12<00:37,  1.45it/s] 25% 18/71 [00:13<00:40,  1.31it/s] 27% 19/71 [00:13<00:35,  1.45it/s] 28% 20/71 [00:14<00:39,  1.29it/s] 30% 21/71 [00:15<00:35,  1.43it/s] 31% 22/71 [00:16<00:38,  1.29it/s] 32% 23/71 [00:16<00:33,  1.42it/s] 34% 24/71 [00:17<00:36,  1.30it/s] 35% 25/71 [00:18<00:32,  1.43it/s] 37% 26/71 [00:18<00:34,  1.29it/s] 38% 27/71 [00:19<00:31,  1.42it/s] 39% 28/71 [00:20<00:32,  1.30it/s] 41% 29/71 [00:20<00:29,  1.43it/s] 42% 30/71 [00:21<00:31,  1.30it/s] 44% 31/71 [00:22<00:28,  1.43it/s] 45% 32/71 [00:23<00:29,  1.31it/s] 46% 33/71 [00:23<00:26,  1.44it/s] 48% 34/71 [00:24<00:28,  1.32it/s] 49% 35/71 [00:25<00:24,  1.45it/s] 51% 36/71 [00:26<00:26,  1.33it/s] 52% 37/71 [00:26<00:23,  1.46it/s] 54% 38/71 [00:27<00:24,  1.33it/s] 55% 39/71 [00:28<00:22,  1.45it/s] 56% 40/71 [00:29<00:23,  1.32it/s] 58% 41/71 [00:29<00:20,  1.44it/s] 59% 42/71 [00:30<00:22,  1.32it/s] 61% 43/71 [00:31<00:19,  1.45it/s] 62% 44/71 [00:32<00:20,  1.31it/s] 63% 45/71 [00:32<00:18,  1.44it/s] 65% 46/71 [00:33<00:19,  1.31it/s] 66% 47/71 [00:34<00:16,  1.45it/s] 68% 48/71 [00:34<00:17,  1.30it/s] 69% 49/71 [00:35<00:15,  1.44it/s] 70% 50/71 [00:36<00:15,  1.32it/s] 72% 51/71 [00:36<00:13,  1.44it/s] 73% 52/71 [00:37<00:14,  1.30it/s] 75% 53/71 [00:38<00:12,  1.43it/s] 76% 54/71 [00:39<00:13,  1.30it/s] 77% 55/71 [00:39<00:11,  1.44it/s] 79% 56/71 [00:40<00:11,  1.30it/s] 80% 57/71 [00:41<00:09,  1.43it/s] 82% 58/71 [00:42<00:09,  1.30it/s] 83% 59/71 [00:42<00:08,  1.42it/s] 85% 60/71 [00:43<00:08,  1.30it/s] 86% 61/71 [00:44<00:06,  1.43it/s] 87% 62/71 [00:45<00:06,  1.29it/s] 89% 63/71 [00:45<00:05,  1.41it/s] 90% 64/71 [00:46<00:05,  1.28it/s] 92% 65/71 [00:47<00:04,  1.42it/s] 93% 66/71 [00:48<00:03,  1.29it/s] 94% 67/71 [00:48<00:02,  1.43it/s] 96% 68/71 [00:49<00:02,  1.30it/s] 97% 69/71 [00:50<00:01,  1.43it/s] 99% 70/71 [00:51<00:00,  1.28it/s]100% 71/71 [00:51<00:00,  1.60it/s]100% 71/71 [00:51<00:00,  1.38it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<01:04,  1.09it/s]  3% 2/71 [00:01<00:47,  1.44it/s]  4% 3/71 [00:02<00:54,  1.26it/s]  6% 4/71 [00:02<00:46,  1.44it/s]  7% 5/71 [00:03<00:51,  1.29it/s]  8% 6/71 [00:04<00:44,  1.45it/s] 10% 7/71 [00:05<00:49,  1.30it/s] 11% 8/71 [00:05<00:43,  1.44it/s] 13% 9/71 [00:06<00:47,  1.31it/s] 14% 10/71 [00:07<00:42,  1.44it/s] 15% 11/71 [00:08<00:45,  1.32it/s] 17% 12/71 [00:08<00:40,  1.45it/s] 18% 13/71 [00:09<00:43,  1.32it/s] 20% 14/71 [00:10<00:39,  1.45it/s] 21% 15/71 [00:11<00:42,  1.30it/s] 23% 16/71 [00:11<00:38,  1.43it/s] 24% 17/71 [00:12<00:41,  1.32it/s] 25% 18/71 [00:13<00:36,  1.45it/s] 27% 19/71 [00:13<00:39,  1.33it/s] 28% 20/71 [00:14<00:34,  1.46it/s] 30% 21/71 [00:15<00:37,  1.34it/s] 31% 22/71 [00:15<00:33,  1.47it/s] 32% 23/71 [00:16<00:36,  1.32it/s] 34% 24/71 [00:17<00:32,  1.44it/s] 35% 25/71 [00:18<00:35,  1.28it/s] 37% 26/71 [00:18<00:31,  1.41it/s] 38% 27/71 [00:19<00:33,  1.31it/s] 39% 28/71 [00:20<00:29,  1.45it/s] 41% 29/71 [00:21<00:32,  1.28it/s] 42% 30/71 [00:21<00:29,  1.41it/s] 44% 31/71 [00:22<00:30,  1.30it/s] 45% 32/71 [00:23<00:27,  1.43it/s] 46% 33/71 [00:24<00:29,  1.28it/s] 48% 34/71 [00:24<00:26,  1.42it/s] 49% 35/71 [00:25<00:27,  1.30it/s] 51% 36/71 [00:26<00:24,  1.44it/s] 52% 37/71 [00:27<00:26,  1.31it/s] 54% 38/71 [00:27<00:22,  1.44it/s] 55% 39/71 [00:28<00:24,  1.30it/s] 56% 40/71 [00:29<00:21,  1.43it/s] 58% 41/71 [00:30<00:22,  1.31it/s] 59% 42/71 [00:30<00:20,  1.45it/s] 61% 43/71 [00:31<00:21,  1.33it/s] 62% 44/71 [00:32<00:18,  1.45it/s] 63% 45/71 [00:32<00:19,  1.32it/s] 65% 46/71 [00:33<00:17,  1.45it/s] 66% 47/71 [00:34<00:18,  1.31it/s] 68% 48/71 [00:34<00:15,  1.45it/s] 69% 49/71 [00:35<00:16,  1.31it/s] 70% 50/71 [00:36<00:14,  1.44it/s] 72% 51/71 [00:37<00:15,  1.29it/s] 73% 52/71 [00:37<00:13,  1.43it/s] 75% 53/71 [00:38<00:13,  1.30it/s] 76% 54/71 [00:39<00:11,  1.43it/s] 77% 55/71 [00:40<00:12,  1.29it/s] 79% 56/71 [00:40<00:10,  1.42it/s] 80% 57/71 [00:41<00:10,  1.30it/s] 82% 58/71 [00:42<00:09,  1.44it/s] 83% 59/71 [00:43<00:09,  1.31it/s] 85% 60/71 [00:43<00:07,  1.44it/s] 86% 61/71 [00:44<00:07,  1.32it/s] 87% 62/71 [00:45<00:06,  1.46it/s] 89% 63/71 [00:46<00:06,  1.33it/s] 90% 64/71 [00:46<00:04,  1.46it/s] 92% 65/71 [00:47<00:04,  1.33it/s] 93% 66/71 [00:48<00:03,  1.48it/s] 94% 67/71 [00:48<00:03,  1.32it/s] 96% 68/71 [00:49<00:02,  1.45it/s] 97% 69/71 [00:50<00:01,  1.32it/s] 99% 70/71 [00:50<00:00,  1.46it/s]100% 71/71 [00:51<00:00,  1.48it/s]100% 71/71 [00:51<00:00,  1.38it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<00:37,  1.85it/s]  3% 2/71 [00:01<00:53,  1.28it/s]  4% 3/71 [00:02<00:45,  1.49it/s]  6% 4/71 [00:02<00:52,  1.27it/s]  7% 5/71 [00:03<00:46,  1.43it/s]  8% 6/71 [00:04<00:50,  1.29it/s] 10% 7/71 [00:04<00:44,  1.44it/s] 11% 8/71 [00:05<00:47,  1.31it/s] 13% 9/71 [00:06<00:42,  1.45it/s] 14% 10/71 [00:07<00:47,  1.29it/s] 15% 11/71 [00:07<00:42,  1.42it/s] 17% 12/71 [00:08<00:45,  1.30it/s] 18% 13/71 [00:09<00:40,  1.43it/s] 20% 14/71 [00:10<00:44,  1.28it/s] 21% 15/71 [00:10<00:39,  1.42it/s] 23% 16/71 [00:11<00:42,  1.29it/s] 24% 17/71 [00:12<00:38,  1.42it/s] 25% 18/71 [00:13<00:40,  1.29it/s] 27% 19/71 [00:13<00:36,  1.42it/s] 28% 20/71 [00:14<00:39,  1.29it/s] 30% 21/71 [00:15<00:35,  1.42it/s] 31% 22/71 [00:16<00:38,  1.28it/s] 32% 23/71 [00:16<00:33,  1.42it/s] 34% 24/71 [00:17<00:36,  1.29it/s] 35% 25/71 [00:18<00:32,  1.42it/s] 37% 26/71 [00:19<00:34,  1.31it/s] 38% 27/71 [00:19<00:30,  1.45it/s] 39% 28/71 [00:20<00:32,  1.31it/s] 41% 29/71 [00:21<00:29,  1.44it/s] 42% 30/71 [00:22<00:31,  1.30it/s] 44% 31/71 [00:22<00:27,  1.43it/s] 45% 32/71 [00:23<00:30,  1.29it/s] 46% 33/71 [00:24<00:26,  1.42it/s] 48% 34/71 [00:25<00:28,  1.28it/s] 49% 35/71 [00:25<00:25,  1.41it/s] 51% 36/71 [00:26<00:27,  1.26it/s] 52% 37/71 [00:27<00:24,  1.40it/s] 54% 38/71 [00:28<00:25,  1.29it/s] 55% 39/71 [00:28<00:22,  1.41it/s] 56% 40/71 [00:29<00:23,  1.30it/s] 58% 41/71 [00:30<00:20,  1.43it/s] 59% 42/71 [00:31<00:22,  1.30it/s] 61% 43/71 [00:31<00:19,  1.43it/s] 62% 44/71 [00:32<00:20,  1.30it/s] 63% 45/71 [00:33<00:18,  1.44it/s] 65% 46/71 [00:33<00:19,  1.31it/s] 66% 47/71 [00:34<00:16,  1.43it/s] 68% 48/71 [00:35<00:17,  1.31it/s] 69% 49/71 [00:35<00:15,  1.44it/s] 70% 50/71 [00:36<00:16,  1.30it/s] 72% 51/71 [00:37<00:13,  1.43it/s] 73% 52/71 [00:38<00:14,  1.31it/s] 75% 53/71 [00:38<00:12,  1.43it/s] 76% 54/71 [00:39<00:13,  1.31it/s] 77% 55/71 [00:40<00:11,  1.44it/s] 79% 56/71 [00:41<00:11,  1.30it/s] 80% 57/71 [00:41<00:09,  1.42it/s] 82% 58/71 [00:42<00:10,  1.30it/s] 83% 59/71 [00:43<00:08,  1.43it/s] 85% 60/71 [00:44<00:08,  1.30it/s] 86% 61/71 [00:44<00:07,  1.42it/s] 87% 62/71 [00:45<00:06,  1.31it/s] 89% 63/71 [00:46<00:05,  1.43it/s] 90% 64/71 [00:47<00:05,  1.31it/s] 92% 65/71 [00:47<00:04,  1.44it/s] 93% 66/71 [00:48<00:03,  1.32it/s] 94% 67/71 [00:49<00:02,  1.45it/s] 96% 68/71 [00:50<00:02,  1.32it/s] 97% 69/71 [00:50<00:01,  1.45it/s] 99% 70/71 [00:51<00:00,  1.32it/s]100% 71/71 [00:51<00:00,  1.65it/s]100% 71/71 [00:51<00:00,  1.37it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<01:04,  1.08it/s]  3% 2/71 [00:01<00:47,  1.44it/s]  4% 3/71 [00:02<00:54,  1.26it/s]  6% 4/71 [00:02<00:46,  1.45it/s]  7% 5/71 [00:03<00:50,  1.30it/s]  8% 6/71 [00:04<00:44,  1.45it/s] 10% 7/71 [00:05<00:48,  1.31it/s] 11% 8/71 [00:05<00:43,  1.44it/s] 13% 9/71 [00:06<00:47,  1.31it/s] 14% 10/71 [00:07<00:42,  1.43it/s] 15% 11/71 [00:08<00:46,  1.30it/s] 17% 12/71 [00:08<00:41,  1.42it/s] 18% 13/71 [00:09<00:44,  1.30it/s] 20% 14/71 [00:10<00:39,  1.43it/s] 21% 15/71 [00:11<00:42,  1.31it/s] 23% 16/71 [00:11<00:38,  1.44it/s] 24% 17/71 [00:12<00:42,  1.28it/s] 25% 18/71 [00:13<00:37,  1.41it/s] 27% 19/71 [00:14<00:40,  1.29it/s] 28% 20/71 [00:14<00:36,  1.42it/s] 30% 21/71 [00:15<00:38,  1.30it/s] 31% 22/71 [00:16<00:33,  1.44it/s] 32% 23/71 [00:17<00:36,  1.31it/s] 34% 24/71 [00:17<00:32,  1.44it/s] 35% 25/71 [00:18<00:35,  1.31it/s] 37% 26/71 [00:19<00:31,  1.44it/s] 38% 27/71 [00:19<00:33,  1.31it/s] 39% 28/71 [00:20<00:29,  1.45it/s] 41% 29/71 [00:21<00:32,  1.31it/s] 42% 30/71 [00:21<00:28,  1.44it/s] 44% 31/71 [00:22<00:30,  1.31it/s] 45% 32/71 [00:23<00:27,  1.44it/s] 46% 33/71 [00:24<00:29,  1.30it/s] 48% 34/71 [00:24<00:26,  1.42it/s] 49% 35/71 [00:25<00:27,  1.31it/s] 51% 36/71 [00:26<00:24,  1.45it/s] 52% 37/71 [00:27<00:25,  1.32it/s] 54% 38/71 [00:27<00:22,  1.46it/s] 55% 39/71 [00:28<00:24,  1.32it/s] 56% 40/71 [00:29<00:21,  1.44it/s] 58% 41/71 [00:30<00:22,  1.31it/s] 59% 42/71 [00:30<00:20,  1.43it/s] 61% 43/71 [00:31<00:21,  1.29it/s] 62% 44/71 [00:32<00:18,  1.42it/s] 63% 45/71 [00:33<00:20,  1.30it/s] 65% 46/71 [00:33<00:17,  1.43it/s] 66% 47/71 [00:34<00:18,  1.29it/s] 68% 48/71 [00:35<00:16,  1.43it/s] 69% 49/71 [00:36<00:16,  1.32it/s] 70% 50/71 [00:36<00:14,  1.46it/s] 72% 51/71 [00:37<00:15,  1.33it/s] 73% 52/71 [00:37<00:13,  1.46it/s] 75% 53/71 [00:38<00:13,  1.33it/s] 76% 54/71 [00:39<00:11,  1.47it/s] 77% 55/71 [00:40<00:11,  1.34it/s] 79% 56/71 [00:40<00:10,  1.47it/s] 80% 57/71 [00:41<00:10,  1.33it/s] 82% 58/71 [00:42<00:08,  1.47it/s] 83% 59/71 [00:43<00:09,  1.33it/s] 85% 60/71 [00:43<00:07,  1.47it/s] 86% 61/71 [00:44<00:07,  1.33it/s] 87% 62/71 [00:45<00:06,  1.47it/s] 89% 63/71 [00:46<00:06,  1.31it/s] 90% 64/71 [00:46<00:04,  1.44it/s] 92% 65/71 [00:47<00:04,  1.31it/s] 93% 66/71 [00:48<00:03,  1.45it/s] 94% 67/71 [00:48<00:02,  1.33it/s] 96% 68/71 [00:49<00:02,  1.45it/s] 97% 69/71 [00:50<00:01,  1.32it/s] 99% 70/71 [00:50<00:00,  1.45it/s]100% 71/71 [00:51<00:00,  1.47it/s]100% 71/71 [00:51<00:00,  1.38it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<00:37,  1.84it/s]  3% 2/71 [00:01<00:52,  1.31it/s]  4% 3/71 [00:01<00:44,  1.54it/s]  6% 4/71 [00:02<00:50,  1.33it/s]  7% 5/71 [00:03<00:43,  1.51it/s]  8% 6/71 [00:04<00:49,  1.32it/s] 10% 7/71 [00:04<00:43,  1.46it/s] 11% 8/71 [00:05<00:47,  1.32it/s] 13% 9/71 [00:06<00:42,  1.46it/s] 14% 10/71 [00:07<00:46,  1.32it/s] 15% 11/71 [00:07<00:41,  1.45it/s] 17% 12/71 [00:08<00:45,  1.30it/s] 18% 13/71 [00:09<00:40,  1.44it/s] 20% 14/71 [00:10<00:43,  1.31it/s] 21% 15/71 [00:10<00:39,  1.43it/s] 23% 16/71 [00:11<00:42,  1.29it/s] 24% 17/71 [00:12<00:37,  1.43it/s] 25% 18/71 [00:13<00:40,  1.30it/s] 27% 19/71 [00:13<00:36,  1.42it/s] 28% 20/71 [00:14<00:39,  1.29it/s] 30% 21/71 [00:15<00:35,  1.42it/s] 31% 22/71 [00:16<00:37,  1.30it/s] 32% 23/71 [00:16<00:33,  1.42it/s] 34% 24/71 [00:17<00:36,  1.28it/s] 35% 25/71 [00:18<00:32,  1.41it/s] 37% 26/71 [00:19<00:34,  1.29it/s] 38% 27/71 [00:19<00:30,  1.42it/s] 39% 28/71 [00:20<00:33,  1.29it/s] 41% 29/71 [00:21<00:29,  1.43it/s] 42% 30/71 [00:22<00:32,  1.27it/s] 44% 31/71 [00:22<00:28,  1.40it/s] 45% 32/71 [00:23<00:31,  1.26it/s] 46% 33/71 [00:24<00:27,  1.39it/s] 48% 34/71 [00:25<00:28,  1.28it/s] 49% 35/71 [00:25<00:25,  1.41it/s] 51% 36/71 [00:26<00:27,  1.28it/s] 52% 37/71 [00:27<00:24,  1.40it/s] 54% 38/71 [00:28<00:25,  1.28it/s] 55% 39/71 [00:28<00:22,  1.40it/s] 56% 40/71 [00:29<00:24,  1.29it/s] 58% 41/71 [00:30<00:21,  1.41it/s] 59% 42/71 [00:31<00:22,  1.28it/s] 61% 43/71 [00:31<00:19,  1.41it/s] 62% 44/71 [00:32<00:20,  1.29it/s] 63% 45/71 [00:32<00:18,  1.43it/s] 65% 46/71 [00:33<00:19,  1.31it/s] 66% 47/71 [00:34<00:16,  1.44it/s] 68% 48/71 [00:35<00:17,  1.31it/s] 69% 49/71 [00:35<00:15,  1.45it/s] 70% 50/71 [00:36<00:15,  1.33it/s] 72% 51/71 [00:37<00:13,  1.45it/s] 73% 52/71 [00:38<00:14,  1.30it/s] 75% 53/71 [00:38<00:12,  1.43it/s] 76% 54/71 [00:39<00:13,  1.30it/s] 77% 55/71 [00:40<00:11,  1.43it/s] 79% 56/71 [00:41<00:11,  1.31it/s] 80% 57/71 [00:41<00:09,  1.44it/s] 82% 58/71 [00:42<00:10,  1.29it/s] 83% 59/71 [00:43<00:08,  1.43it/s] 85% 60/71 [00:44<00:08,  1.30it/s] 86% 61/71 [00:44<00:06,  1.44it/s] 87% 62/71 [00:45<00:06,  1.31it/s] 89% 63/71 [00:46<00:05,  1.44it/s] 90% 64/71 [00:47<00:05,  1.32it/s] 92% 65/71 [00:47<00:04,  1.44it/s] 93% 66/71 [00:48<00:03,  1.29it/s] 94% 67/71 [00:49<00:02,  1.41it/s] 96% 68/71 [00:50<00:02,  1.29it/s] 97% 69/71 [00:50<00:01,  1.42it/s] 99% 70/71 [00:51<00:00,  1.30it/s]100% 71/71 [00:51<00:00,  1.62it/s]100% 71/71 [00:51<00:00,  1.37it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<01:04,  1.08it/s]  3% 2/71 [00:01<00:48,  1.42it/s]  4% 3/71 [00:02<00:54,  1.26it/s]  6% 4/71 [00:02<00:46,  1.44it/s]  7% 5/71 [00:03<00:52,  1.26it/s]  8% 6/71 [00:04<00:45,  1.42it/s] 10% 7/71 [00:05<00:49,  1.29it/s] 11% 8/71 [00:05<00:44,  1.43it/s] 13% 9/71 [00:06<00:48,  1.28it/s] 14% 10/71 [00:07<00:42,  1.42it/s] 15% 11/71 [00:08<00:46,  1.30it/s] 17% 12/71 [00:08<00:41,  1.42it/s] 18% 13/71 [00:09<00:44,  1.30it/s] 20% 14/71 [00:10<00:39,  1.43it/s] 21% 15/71 [00:11<00:42,  1.30it/s] 23% 16/71 [00:11<00:38,  1.44it/s] 24% 17/71 [00:12<00:41,  1.31it/s] 25% 18/71 [00:13<00:36,  1.45it/s] 27% 19/71 [00:14<00:39,  1.32it/s] 28% 20/71 [00:14<00:35,  1.45it/s] 30% 21/71 [00:15<00:38,  1.31it/s] 31% 22/71 [00:16<00:34,  1.44it/s] 32% 23/71 [00:17<00:36,  1.31it/s] 34% 24/71 [00:17<00:32,  1.44it/s] 35% 25/71 [00:18<00:35,  1.31it/s] 37% 26/71 [00:19<00:31,  1.44it/s] 38% 27/71 [00:19<00:34,  1.29it/s] 39% 28/71 [00:20<00:30,  1.42it/s] 41% 29/71 [00:21<00:32,  1.30it/s] 42% 30/71 [00:21<00:28,  1.43it/s] 44% 31/71 [00:22<00:30,  1.31it/s] 45% 32/71 [00:23<00:27,  1.44it/s] 46% 33/71 [00:24<00:29,  1.31it/s] 48% 34/71 [00:24<00:25,  1.43it/s] 49% 35/71 [00:25<00:27,  1.30it/s] 51% 36/71 [00:26<00:24,  1.42it/s] 52% 37/71 [00:27<00:26,  1.31it/s] 54% 38/71 [00:27<00:22,  1.44it/s] 55% 39/71 [00:28<00:24,  1.33it/s] 56% 40/71 [00:29<00:21,  1.45it/s] 58% 41/71 [00:30<00:22,  1.31it/s] 59% 42/71 [00:30<00:20,  1.44it/s] 61% 43/71 [00:31<00:21,  1.30it/s] 62% 44/71 [00:32<00:18,  1.43it/s] 63% 45/71 [00:33<00:19,  1.31it/s] 65% 46/71 [00:33<00:17,  1.44it/s] 66% 47/71 [00:34<00:18,  1.32it/s] 68% 48/71 [00:35<00:15,  1.45it/s] 69% 49/71 [00:36<00:16,  1.31it/s] 70% 50/71 [00:36<00:14,  1.44it/s] 72% 51/71 [00:37<00:15,  1.30it/s] 73% 52/71 [00:38<00:13,  1.43it/s] 75% 53/71 [00:38<00:13,  1.30it/s] 76% 54/71 [00:39<00:11,  1.44it/s] 77% 55/71 [00:40<00:12,  1.31it/s] 79% 56/71 [00:40<00:10,  1.44it/s] 80% 57/71 [00:41<00:10,  1.31it/s] 82% 58/71 [00:42<00:09,  1.44it/s] 83% 59/71 [00:43<00:09,  1.30it/s] 85% 60/71 [00:43<00:07,  1.43it/s] 86% 61/71 [00:44<00:07,  1.29it/s] 87% 62/71 [00:45<00:06,  1.43it/s] 89% 63/71 [00:46<00:06,  1.30it/s] 90% 64/71 [00:46<00:04,  1.43it/s] 92% 65/71 [00:47<00:04,  1.32it/s] 93% 66/71 [00:48<00:03,  1.44it/s] 94% 67/71 [00:49<00:03,  1.32it/s] 96% 68/71 [00:49<00:02,  1.45it/s] 97% 69/71 [00:50<00:01,  1.32it/s] 99% 70/71 [00:51<00:00,  1.45it/s]100% 71/71 [00:51<00:00,  1.46it/s]100% 71/71 [00:51<00:00,  1.37it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<00:37,  1.85it/s]  3% 2/71 [00:01<00:52,  1.31it/s]  4% 3/71 [00:01<00:44,  1.54it/s]  6% 4/71 [00:02<00:50,  1.32it/s]  7% 5/71 [00:03<00:44,  1.47it/s]  8% 6/71 [00:04<00:48,  1.33it/s] 10% 7/71 [00:04<00:43,  1.47it/s] 11% 8/71 [00:05<00:48,  1.31it/s] 13% 9/71 [00:06<00:42,  1.44it/s] 14% 10/71 [00:07<00:46,  1.31it/s] 15% 11/71 [00:07<00:41,  1.43it/s] 17% 12/71 [00:08<00:45,  1.30it/s] 18% 13/71 [00:09<00:40,  1.43it/s] 20% 14/71 [00:10<00:43,  1.32it/s] 21% 15/71 [00:10<00:38,  1.46it/s] 23% 16/71 [00:11<00:41,  1.32it/s] 24% 17/71 [00:12<00:37,  1.45it/s] 25% 18/71 [00:13<00:39,  1.33it/s] 27% 19/71 [00:13<00:35,  1.45it/s] 28% 20/71 [00:14<00:38,  1.32it/s] 30% 21/71 [00:15<00:34,  1.44it/s] 31% 22/71 [00:15<00:37,  1.32it/s] 32% 23/71 [00:16<00:33,  1.44it/s] 34% 24/71 [00:17<00:35,  1.32it/s] 35% 25/71 [00:17<00:31,  1.45it/s] 37% 26/71 [00:18<00:34,  1.32it/s] 38% 27/71 [00:19<00:30,  1.45it/s] 39% 28/71 [00:20<00:32,  1.32it/s] 41% 29/71 [00:20<00:29,  1.44it/s] 42% 30/71 [00:21<00:31,  1.29it/s] 44% 31/71 [00:22<00:28,  1.42it/s] 45% 32/71 [00:23<00:29,  1.31it/s] 46% 33/71 [00:23<00:26,  1.43it/s] 48% 34/71 [00:24<00:28,  1.30it/s] 49% 35/71 [00:25<00:25,  1.43it/s] 51% 36/71 [00:26<00:26,  1.30it/s] 52% 37/71 [00:26<00:23,  1.44it/s] 54% 38/71 [00:27<00:25,  1.30it/s] 55% 39/71 [00:28<00:22,  1.43it/s] 56% 40/71 [00:29<00:23,  1.30it/s] 58% 41/71 [00:29<00:20,  1.43it/s] 59% 42/71 [00:30<00:22,  1.31it/s] 61% 43/71 [00:31<00:19,  1.43it/s] 62% 44/71 [00:32<00:20,  1.30it/s] 63% 45/71 [00:32<00:18,  1.43it/s] 65% 46/71 [00:33<00:19,  1.31it/s] 66% 47/71 [00:34<00:16,  1.44it/s] 68% 48/71 [00:34<00:17,  1.32it/s] 69% 49/71 [00:35<00:15,  1.45it/s] 70% 50/71 [00:36<00:16,  1.31it/s] 72% 51/71 [00:36<00:13,  1.43it/s] 73% 52/71 [00:37<00:14,  1.31it/s] 75% 53/71 [00:38<00:12,  1.45it/s] 76% 54/71 [00:39<00:12,  1.33it/s] 77% 55/71 [00:39<00:11,  1.45it/s] 79% 56/71 [00:40<00:11,  1.33it/s] 80% 57/71 [00:41<00:09,  1.45it/s] 82% 58/71 [00:42<00:09,  1.32it/s] 83% 59/71 [00:42<00:08,  1.46it/s] 85% 60/71 [00:43<00:08,  1.32it/s] 86% 61/71 [00:44<00:06,  1.45it/s] 87% 62/71 [00:45<00:06,  1.31it/s] 89% 63/71 [00:45<00:05,  1.44it/s] 90% 64/71 [00:46<00:05,  1.30it/s] 92% 65/71 [00:47<00:04,  1.43it/s] 93% 66/71 [00:48<00:03,  1.29it/s] 94% 67/71 [00:48<00:02,  1.43it/s] 96% 68/71 [00:49<00:02,  1.31it/s] 97% 69/71 [00:50<00:01,  1.43it/s] 99% 70/71 [00:50<00:00,  1.31it/s]100% 71/71 [00:51<00:00,  1.62it/s]100% 71/71 [00:51<00:00,  1.39it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<01:05,  1.07it/s]  3% 2/71 [00:01<00:47,  1.45it/s]  4% 3/71 [00:02<00:53,  1.27it/s]  6% 4/71 [00:02<00:46,  1.45it/s]  7% 5/71 [00:03<00:50,  1.30it/s]  8% 6/71 [00:04<00:44,  1.46it/s] 10% 7/71 [00:05<00:48,  1.31it/s] 11% 8/71 [00:05<00:43,  1.45it/s] 13% 9/71 [00:06<00:47,  1.29it/s] 14% 10/71 [00:07<00:42,  1.42it/s] 15% 11/71 [00:08<00:46,  1.28it/s] 17% 12/71 [00:08<00:41,  1.41it/s] 18% 13/71 [00:09<00:44,  1.29it/s] 20% 14/71 [00:10<00:40,  1.42it/s] 21% 15/71 [00:11<00:43,  1.29it/s] 23% 16/71 [00:11<00:38,  1.43it/s] 24% 17/71 [00:12<00:41,  1.30it/s] 25% 18/71 [00:13<00:37,  1.43it/s] 27% 19/71 [00:14<00:39,  1.31it/s] 28% 20/71 [00:14<00:35,  1.44it/s] 30% 21/71 [00:15<00:38,  1.32it/s] 31% 22/71 [00:16<00:33,  1.44it/s] 32% 23/71 [00:17<00:36,  1.31it/s] 34% 24/71 [00:17<00:32,  1.44it/s] 35% 25/71 [00:18<00:35,  1.31it/s] 37% 26/71 [00:19<00:31,  1.44it/s] 38% 27/71 [00:19<00:33,  1.31it/s] 39% 28/71 [00:20<00:29,  1.44it/s] 41% 29/71 [00:21<00:32,  1.30it/s] 42% 30/71 [00:21<00:28,  1.43it/s] 44% 31/71 [00:22<00:30,  1.29it/s] 45% 32/71 [00:23<00:27,  1.42it/s] 46% 33/71 [00:24<00:29,  1.30it/s] 48% 34/71 [00:24<00:26,  1.42it/s] 49% 35/71 [00:25<00:27,  1.30it/s] 51% 36/71 [00:26<00:24,  1.43it/s] 52% 37/71 [00:27<00:26,  1.30it/s] 54% 38/71 [00:27<00:23,  1.43it/s] 55% 39/71 [00:28<00:24,  1.30it/s] 56% 40/71 [00:29<00:21,  1.43it/s] 58% 41/71 [00:30<00:23,  1.30it/s] 59% 42/71 [00:30<00:20,  1.43it/s] 61% 43/71 [00:31<00:21,  1.29it/s] 62% 44/71 [00:32<00:18,  1.42it/s] 63% 45/71 [00:33<00:20,  1.30it/s] 65% 46/71 [00:33<00:17,  1.43it/s] 66% 47/71 [00:34<00:18,  1.31it/s] 68% 48/71 [00:35<00:15,  1.44it/s] 69% 49/71 [00:36<00:16,  1.30it/s] 70% 50/71 [00:36<00:14,  1.43it/s] 72% 51/71 [00:37<00:15,  1.30it/s] 73% 52/71 [00:38<00:13,  1.43it/s] 75% 53/71 [00:39<00:13,  1.30it/s] 76% 54/71 [00:39<00:11,  1.43it/s] 77% 55/71 [00:40<00:12,  1.29it/s] 79% 56/71 [00:41<00:10,  1.42it/s] 80% 57/71 [00:41<00:10,  1.30it/s] 82% 58/71 [00:42<00:09,  1.44it/s] 83% 59/71 [00:43<00:09,  1.31it/s] 85% 60/71 [00:43<00:07,  1.44it/s] 86% 61/71 [00:44<00:07,  1.31it/s] 87% 62/71 [00:45<00:06,  1.44it/s] 89% 63/71 [00:46<00:06,  1.31it/s] 90% 64/71 [00:46<00:04,  1.44it/s] 92% 65/71 [00:47<00:04,  1.31it/s] 93% 66/71 [00:48<00:03,  1.44it/s] 94% 67/71 [00:49<00:03,  1.30it/s] 96% 68/71 [00:49<00:02,  1.43it/s] 97% 69/71 [00:50<00:01,  1.30it/s] 99% 70/71 [00:51<00:00,  1.42it/s]100% 71/71 [00:51<00:00,  1.46it/s]100% 71/71 [00:51<00:00,  1.37it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<00:38,  1.82it/s]  3% 2/71 [00:01<00:52,  1.32it/s]  4% 3/71 [00:01<00:43,  1.55it/s]  6% 4/71 [00:02<00:50,  1.32it/s]  7% 5/71 [00:03<00:44,  1.49it/s]  8% 6/71 [00:04<00:49,  1.30it/s] 10% 7/71 [00:04<00:44,  1.44it/s] 11% 8/71 [00:05<00:48,  1.31it/s] 13% 9/71 [00:06<00:43,  1.44it/s] 14% 10/71 [00:07<00:46,  1.30it/s] 15% 11/71 [00:07<00:41,  1.43it/s] 17% 12/71 [00:08<00:45,  1.31it/s] 18% 13/71 [00:09<00:40,  1.44it/s] 20% 14/71 [00:10<00:43,  1.31it/s] 21% 15/71 [00:10<00:38,  1.44it/s] 23% 16/71 [00:11<00:41,  1.32it/s] 24% 17/71 [00:12<00:37,  1.45it/s] 25% 18/71 [00:13<00:40,  1.32it/s] 27% 19/71 [00:13<00:35,  1.46it/s] 28% 20/71 [00:14<00:38,  1.32it/s] 30% 21/71 [00:15<00:34,  1.45it/s] 31% 22/71 [00:16<00:37,  1.31it/s] 32% 23/71 [00:16<00:33,  1.44it/s] 34% 24/71 [00:17<00:35,  1.32it/s] 35% 25/71 [00:17<00:31,  1.45it/s] 37% 26/71 [00:18<00:34,  1.30it/s] 38% 27/71 [00:19<00:30,  1.43it/s] 39% 28/71 [00:20<00:32,  1.31it/s] 41% 29/71 [00:20<00:28,  1.45it/s] 42% 30/71 [00:21<00:31,  1.32it/s] 44% 31/71 [00:22<00:27,  1.45it/s] 45% 32/71 [00:23<00:29,  1.32it/s] 46% 33/71 [00:23<00:26,  1.45it/s] 48% 34/71 [00:24<00:27,  1.32it/s] 49% 35/71 [00:25<00:24,  1.46it/s] 51% 36/71 [00:26<00:26,  1.34it/s] 52% 37/71 [00:26<00:23,  1.47it/s] 54% 38/71 [00:27<00:24,  1.33it/s] 55% 39/71 [00:28<00:22,  1.45it/s] 56% 40/71 [00:29<00:23,  1.30it/s] 58% 41/71 [00:29<00:20,  1.44it/s] 59% 42/71 [00:30<00:22,  1.31it/s] 61% 43/71 [00:31<00:19,  1.44it/s] 62% 44/71 [00:31<00:20,  1.31it/s] 63% 45/71 [00:32<00:18,  1.43it/s] 65% 46/71 [00:33<00:19,  1.31it/s] 66% 47/71 [00:33<00:16,  1.44it/s] 68% 48/71 [00:34<00:17,  1.32it/s] 69% 49/71 [00:35<00:15,  1.44it/s] 70% 50/71 [00:36<00:15,  1.31it/s] 72% 51/71 [00:36<00:13,  1.43it/s] 73% 52/71 [00:37<00:14,  1.32it/s] 75% 53/71 [00:38<00:12,  1.44it/s] 76% 54/71 [00:39<00:13,  1.30it/s] 77% 55/71 [00:39<00:11,  1.44it/s] 79% 56/71 [00:40<00:11,  1.29it/s] 80% 57/71 [00:41<00:09,  1.42it/s] 82% 58/71 [00:42<00:09,  1.30it/s] 83% 59/71 [00:42<00:08,  1.43it/s] 85% 60/71 [00:43<00:08,  1.28it/s] 86% 61/71 [00:44<00:07,  1.40it/s] 87% 62/71 [00:45<00:06,  1.29it/s] 89% 63/71 [00:45<00:05,  1.41it/s] 90% 64/71 [00:46<00:05,  1.29it/s] 92% 65/71 [00:47<00:04,  1.42it/s] 93% 66/71 [00:48<00:03,  1.29it/s] 94% 67/71 [00:48<00:02,  1.42it/s] 96% 68/71 [00:49<00:02,  1.29it/s] 97% 69/71 [00:50<00:01,  1.42it/s] 99% 70/71 [00:51<00:00,  1.29it/s]100% 71/71 [00:51<00:00,  1.60it/s]100% 71/71 [00:51<00:00,  1.38it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<01:04,  1.08it/s]  3% 2/71 [00:01<00:48,  1.43it/s]  4% 3/71 [00:02<00:54,  1.25it/s]  6% 4/71 [00:02<00:47,  1.42it/s]  7% 5/71 [00:03<00:51,  1.28it/s]  8% 6/71 [00:04<00:45,  1.43it/s] 10% 7/71 [00:05<00:49,  1.30it/s] 11% 8/71 [00:05<00:43,  1.44it/s] 13% 9/71 [00:06<00:47,  1.30it/s] 14% 10/71 [00:07<00:42,  1.43it/s] 15% 11/71 [00:08<00:46,  1.30it/s] 17% 12/71 [00:08<00:41,  1.43it/s] 18% 13/71 [00:09<00:44,  1.30it/s] 20% 14/71 [00:10<00:39,  1.43it/s] 21% 15/71 [00:11<00:42,  1.31it/s] 23% 16/71 [00:11<00:38,  1.44it/s] 24% 17/71 [00:12<00:41,  1.31it/s] 25% 18/71 [00:13<00:36,  1.44it/s] 27% 19/71 [00:14<00:39,  1.30it/s] 28% 20/71 [00:14<00:35,  1.43it/s] 30% 21/71 [00:15<00:38,  1.29it/s] 31% 22/71 [00:16<00:34,  1.42it/s] 32% 23/71 [00:17<00:37,  1.28it/s] 34% 24/71 [00:17<00:33,  1.41it/s] 35% 25/71 [00:18<00:35,  1.30it/s] 37% 26/71 [00:19<00:31,  1.42it/s] 38% 27/71 [00:20<00:33,  1.30it/s] 39% 28/71 [00:20<00:30,  1.41it/s] 41% 29/71 [00:21<00:32,  1.29it/s] 42% 30/71 [00:22<00:28,  1.42it/s] 44% 31/71 [00:22<00:30,  1.30it/s] 45% 32/71 [00:23<00:27,  1.44it/s] 46% 33/71 [00:24<00:29,  1.30it/s] 48% 34/71 [00:24<00:25,  1.43it/s] 49% 35/71 [00:25<00:27,  1.30it/s] 51% 36/71 [00:26<00:24,  1.43it/s] 52% 37/71 [00:27<00:26,  1.30it/s] 54% 38/71 [00:27<00:23,  1.43it/s] 55% 39/71 [00:28<00:24,  1.29it/s] 56% 40/71 [00:29<00:21,  1.43it/s] 58% 41/71 [00:30<00:22,  1.31it/s] 59% 42/71 [00:30<00:20,  1.44it/s] 61% 43/71 [00:31<00:21,  1.29it/s] 62% 44/71 [00:32<00:19,  1.42it/s] 63% 45/71 [00:33<00:20,  1.30it/s] 65% 46/71 [00:33<00:17,  1.42it/s] 66% 47/71 [00:34<00:18,  1.29it/s] 68% 48/71 [00:35<00:16,  1.42it/s] 69% 49/71 [00:36<00:16,  1.31it/s] 70% 50/71 [00:36<00:14,  1.44it/s] 72% 51/71 [00:37<00:15,  1.31it/s] 73% 52/71 [00:38<00:13,  1.44it/s] 75% 53/71 [00:39<00:13,  1.32it/s] 76% 54/71 [00:39<00:11,  1.45it/s] 77% 55/71 [00:40<00:12,  1.31it/s] 79% 56/71 [00:41<00:10,  1.44it/s] 80% 57/71 [00:42<00:10,  1.31it/s] 82% 58/71 [00:42<00:09,  1.43it/s] 83% 59/71 [00:43<00:09,  1.30it/s] 85% 60/71 [00:44<00:07,  1.43it/s] 86% 61/71 [00:45<00:07,  1.28it/s] 87% 62/71 [00:45<00:06,  1.42it/s] 89% 63/71 [00:46<00:06,  1.29it/s] 90% 64/71 [00:47<00:04,  1.43it/s] 92% 65/71 [00:47<00:04,  1.29it/s] 93% 66/71 [00:48<00:03,  1.41it/s] 94% 67/71 [00:49<00:03,  1.29it/s] 96% 68/71 [00:49<00:02,  1.42it/s] 97% 69/71 [00:50<00:01,  1.29it/s] 99% 70/71 [00:51<00:00,  1.42it/s]100% 71/71 [00:52<00:00,  1.45it/s]100% 71/71 [00:52<00:00,  1.36it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<00:37,  1.87it/s]  3% 2/71 [00:01<00:53,  1.30it/s]  4% 3/71 [00:02<00:45,  1.51it/s]  6% 4/71 [00:02<00:51,  1.30it/s]  7% 5/71 [00:03<00:45,  1.46it/s]  8% 6/71 [00:04<00:49,  1.30it/s] 10% 7/71 [00:04<00:43,  1.46it/s] 11% 8/71 [00:05<00:48,  1.31it/s] 13% 9/71 [00:06<00:42,  1.45it/s] 14% 10/71 [00:07<00:46,  1.31it/s] 15% 11/71 [00:07<00:41,  1.43it/s] 17% 12/71 [00:08<00:45,  1.31it/s] 18% 13/71 [00:09<00:40,  1.44it/s] 20% 14/71 [00:10<00:43,  1.32it/s] 21% 15/71 [00:10<00:38,  1.45it/s] 23% 16/71 [00:11<00:41,  1.32it/s] 24% 17/71 [00:12<00:37,  1.46it/s] 25% 18/71 [00:13<00:40,  1.32it/s] 27% 19/71 [00:13<00:36,  1.43it/s] 28% 20/71 [00:14<00:39,  1.31it/s] 30% 21/71 [00:15<00:34,  1.45it/s] 31% 22/71 [00:16<00:37,  1.30it/s] 32% 23/71 [00:16<00:33,  1.43it/s] 34% 24/71 [00:17<00:36,  1.28it/s] 35% 25/71 [00:18<00:32,  1.42it/s] 37% 26/71 [00:19<00:34,  1.30it/s] 38% 27/71 [00:19<00:30,  1.42it/s] 39% 28/71 [00:20<00:33,  1.30it/s] 41% 29/71 [00:21<00:29,  1.42it/s] 42% 30/71 [00:21<00:31,  1.31it/s] 44% 31/71 [00:22<00:27,  1.44it/s] 45% 32/71 [00:23<00:30,  1.29it/s] 46% 33/71 [00:23<00:26,  1.41it/s] 48% 34/71 [00:24<00:28,  1.30it/s] 49% 35/71 [00:25<00:25,  1.42it/s] 51% 36/71 [00:26<00:26,  1.30it/s] 52% 37/71 [00:26<00:23,  1.42it/s] 54% 38/71 [00:27<00:25,  1.28it/s] 55% 39/71 [00:28<00:22,  1.42it/s] 56% 40/71 [00:29<00:23,  1.30it/s] 58% 41/71 [00:29<00:21,  1.42it/s] 59% 42/71 [00:30<00:22,  1.30it/s] 61% 43/71 [00:31<00:19,  1.43it/s] 62% 44/71 [00:32<00:20,  1.30it/s] 63% 45/71 [00:32<00:18,  1.42it/s] 65% 46/71 [00:33<00:19,  1.29it/s] 66% 47/71 [00:34<00:16,  1.42it/s] 68% 48/71 [00:35<00:17,  1.29it/s] 69% 49/71 [00:35<00:15,  1.41it/s] 70% 50/71 [00:36<00:16,  1.28it/s] 72% 51/71 [00:37<00:14,  1.41it/s] 73% 52/71 [00:38<00:14,  1.29it/s] 75% 53/71 [00:38<00:12,  1.41it/s] 76% 54/71 [00:39<00:13,  1.27it/s] 77% 55/71 [00:40<00:11,  1.41it/s] 79% 56/71 [00:41<00:11,  1.30it/s] 80% 57/71 [00:41<00:09,  1.43it/s] 82% 58/71 [00:42<00:09,  1.31it/s] 83% 59/71 [00:43<00:08,  1.44it/s] 85% 60/71 [00:44<00:08,  1.30it/s] 86% 61/71 [00:44<00:07,  1.42it/s] 87% 62/71 [00:45<00:06,  1.30it/s] 89% 63/71 [00:46<00:05,  1.43it/s] 90% 64/71 [00:47<00:05,  1.31it/s] 92% 65/71 [00:47<00:04,  1.45it/s] 93% 66/71 [00:48<00:03,  1.29it/s] 94% 67/71 [00:49<00:02,  1.43it/s] 96% 68/71 [00:49<00:02,  1.29it/s] 97% 69/71 [00:50<00:01,  1.42it/s] 99% 70/71 [00:51<00:00,  1.29it/s]100% 71/71 [00:51<00:00,  1.61it/s]100% 71/71 [00:51<00:00,  1.37it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<01:04,  1.09it/s]  3% 2/71 [00:01<00:47,  1.44it/s]  4% 3/71 [00:02<00:54,  1.25it/s]  6% 4/71 [00:02<00:46,  1.43it/s]  7% 5/71 [00:03<00:52,  1.26it/s]  8% 6/71 [00:04<00:46,  1.41it/s] 10% 7/71 [00:05<00:50,  1.28it/s] 11% 8/71 [00:05<00:44,  1.41it/s] 13% 9/71 [00:06<00:48,  1.28it/s] 14% 10/71 [00:07<00:43,  1.41it/s] 15% 11/71 [00:08<00:46,  1.29it/s] 17% 12/71 [00:08<00:41,  1.41it/s] 18% 13/71 [00:09<00:45,  1.28it/s] 20% 14/71 [00:10<00:40,  1.40it/s] 21% 15/71 [00:11<00:43,  1.29it/s] 23% 16/71 [00:11<00:38,  1.43it/s] 24% 17/71 [00:12<00:41,  1.30it/s] 25% 18/71 [00:13<00:37,  1.43it/s] 27% 19/71 [00:14<00:39,  1.31it/s] 28% 20/71 [00:14<00:35,  1.44it/s] 30% 21/71 [00:15<00:38,  1.31it/s] 31% 22/71 [00:16<00:34,  1.44it/s] 32% 23/71 [00:17<00:36,  1.32it/s] 34% 24/71 [00:17<00:32,  1.45it/s] 35% 25/71 [00:18<00:35,  1.31it/s] 37% 26/71 [00:19<00:31,  1.44it/s] 38% 27/71 [00:20<00:33,  1.31it/s] 39% 28/71 [00:20<00:30,  1.43it/s] 41% 29/71 [00:21<00:32,  1.31it/s] 42% 30/71 [00:22<00:28,  1.43it/s] 44% 31/71 [00:22<00:30,  1.31it/s] 45% 32/71 [00:23<00:27,  1.44it/s] 46% 33/71 [00:24<00:28,  1.31it/s] 48% 34/71 [00:24<00:25,  1.44it/s] 49% 35/71 [00:25<00:27,  1.31it/s] 51% 36/71 [00:26<00:24,  1.45it/s] 52% 37/71 [00:27<00:25,  1.33it/s] 54% 38/71 [00:27<00:22,  1.46it/s] 55% 39/71 [00:28<00:24,  1.33it/s] 56% 40/71 [00:29<00:21,  1.46it/s] 58% 41/71 [00:30<00:22,  1.32it/s] 59% 42/71 [00:30<00:20,  1.45it/s] 61% 43/71 [00:31<00:21,  1.30it/s] 62% 44/71 [00:32<00:18,  1.43it/s] 63% 45/71 [00:33<00:20,  1.29it/s] 65% 46/71 [00:33<00:17,  1.42it/s] 66% 47/71 [00:34<00:18,  1.30it/s] 68% 48/71 [00:35<00:16,  1.42it/s] 69% 49/71 [00:36<00:16,  1.29it/s] 70% 50/71 [00:36<00:14,  1.42it/s] 72% 51/71 [00:37<00:15,  1.30it/s] 73% 52/71 [00:38<00:13,  1.42it/s] 75% 53/71 [00:39<00:13,  1.30it/s] 76% 54/71 [00:39<00:11,  1.43it/s] 77% 55/71 [00:40<00:12,  1.31it/s] 79% 56/71 [00:41<00:10,  1.44it/s] 80% 57/71 [00:41<00:10,  1.31it/s] 82% 58/71 [00:42<00:09,  1.44it/s] 83% 59/71 [00:43<00:09,  1.31it/s] 85% 60/71 [00:43<00:07,  1.44it/s] 86% 61/71 [00:44<00:07,  1.32it/s] 87% 62/71 [00:45<00:06,  1.44it/s] 89% 63/71 [00:46<00:06,  1.30it/s] 90% 64/71 [00:46<00:04,  1.43it/s] 92% 65/71 [00:47<00:04,  1.31it/s] 93% 66/71 [00:48<00:03,  1.45it/s] 94% 67/71 [00:49<00:03,  1.31it/s] 96% 68/71 [00:49<00:02,  1.45it/s] 97% 69/71 [00:50<00:01,  1.33it/s] 99% 70/71 [00:51<00:00,  1.45it/s]100% 71/71 [00:51<00:00,  1.48it/s]100% 71/71 [00:51<00:00,  1.37it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<00:36,  1.90it/s]  3% 2/71 [00:01<00:52,  1.31it/s]  4% 3/71 [00:01<00:45,  1.51it/s]  6% 4/71 [00:02<00:50,  1.33it/s]  7% 5/71 [00:03<00:44,  1.49it/s]  8% 6/71 [00:04<00:50,  1.30it/s] 10% 7/71 [00:04<00:44,  1.44it/s] 11% 8/71 [00:05<00:48,  1.31it/s] 13% 9/71 [00:06<00:43,  1.44it/s] 14% 10/71 [00:07<00:46,  1.31it/s] 15% 11/71 [00:07<00:41,  1.43it/s] 17% 12/71 [00:08<00:45,  1.31it/s] 18% 13/71 [00:09<00:40,  1.43it/s] 20% 14/71 [00:10<00:43,  1.31it/s] 21% 15/71 [00:10<00:39,  1.43it/s] 23% 16/71 [00:11<00:43,  1.28it/s] 24% 17/71 [00:12<00:38,  1.41it/s] 25% 18/71 [00:13<00:40,  1.30it/s] 27% 19/71 [00:13<00:36,  1.42it/s] 28% 20/71 [00:14<00:39,  1.30it/s] 30% 21/71 [00:15<00:35,  1.42it/s] 31% 22/71 [00:16<00:37,  1.30it/s] 32% 23/71 [00:16<00:33,  1.44it/s] 34% 24/71 [00:17<00:35,  1.32it/s] 35% 25/71 [00:18<00:31,  1.46it/s] 37% 26/71 [00:19<00:34,  1.32it/s] 38% 27/71 [00:19<00:30,  1.45it/s] 39% 28/71 [00:20<00:32,  1.31it/s] 41% 29/71 [00:21<00:29,  1.43it/s] 42% 30/71 [00:21<00:31,  1.32it/s] 44% 31/71 [00:22<00:27,  1.44it/s] 45% 32/71 [00:23<00:29,  1.32it/s] 46% 33/71 [00:23<00:26,  1.45it/s] 48% 34/71 [00:24<00:28,  1.32it/s] 49% 35/71 [00:25<00:24,  1.45it/s] 51% 36/71 [00:26<00:26,  1.32it/s] 52% 37/71 [00:26<00:23,  1.44it/s] 54% 38/71 [00:27<00:25,  1.31it/s] 55% 39/71 [00:28<00:22,  1.44it/s] 56% 40/71 [00:29<00:24,  1.29it/s] 58% 41/71 [00:29<00:21,  1.43it/s] 59% 42/71 [00:30<00:22,  1.30it/s] 61% 43/71 [00:31<00:19,  1.43it/s] 62% 44/71 [00:32<00:20,  1.29it/s] 63% 45/71 [00:32<00:18,  1.42it/s] 65% 46/71 [00:33<00:19,  1.30it/s] 66% 47/71 [00:34<00:16,  1.43it/s] 68% 48/71 [00:35<00:17,  1.31it/s] 69% 49/71 [00:35<00:15,  1.45it/s] 70% 50/71 [00:36<00:15,  1.31it/s] 72% 51/71 [00:37<00:13,  1.44it/s] 73% 52/71 [00:37<00:14,  1.31it/s] 75% 53/71 [00:38<00:12,  1.43it/s] 76% 54/71 [00:39<00:13,  1.30it/s] 77% 55/71 [00:40<00:11,  1.43it/s] 79% 56/71 [00:40<00:11,  1.32it/s] 80% 57/71 [00:41<00:09,  1.44it/s] 82% 58/71 [00:42<00:09,  1.30it/s] 83% 59/71 [00:42<00:08,  1.43it/s] 85% 60/71 [00:43<00:08,  1.30it/s] 86% 61/71 [00:44<00:06,  1.43it/s] 87% 62/71 [00:45<00:06,  1.30it/s] 89% 63/71 [00:45<00:05,  1.43it/s] 90% 64/71 [00:46<00:05,  1.28it/s] 92% 65/71 [00:47<00:04,  1.40it/s] 93% 66/71 [00:48<00:03,  1.28it/s] 94% 67/71 [00:48<00:02,  1.40it/s] 96% 68/71 [00:49<00:02,  1.27it/s] 97% 69/71 [00:50<00:01,  1.39it/s] 99% 70/71 [00:51<00:00,  1.27it/s]100% 71/71 [00:51<00:00,  1.59it/s]100% 71/71 [00:51<00:00,  1.38it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<01:04,  1.08it/s]  3% 2/71 [00:01<00:48,  1.42it/s]  4% 3/71 [00:02<00:54,  1.24it/s]  6% 4/71 [00:02<00:47,  1.42it/s]  7% 5/71 [00:03<00:51,  1.27it/s]  8% 6/71 [00:04<00:45,  1.41it/s] 10% 7/71 [00:05<00:49,  1.28it/s] 11% 8/71 [00:05<00:44,  1.43it/s] 13% 9/71 [00:06<00:47,  1.30it/s] 14% 10/71 [00:07<00:42,  1.43it/s] 15% 11/71 [00:08<00:46,  1.29it/s] 17% 12/71 [00:08<00:41,  1.41it/s] 18% 13/71 [00:09<00:44,  1.29it/s] 20% 14/71 [00:10<00:40,  1.42it/s] 21% 15/71 [00:11<00:43,  1.28it/s] 23% 16/71 [00:11<00:38,  1.41it/s] 24% 17/71 [00:12<00:41,  1.29it/s] 25% 18/71 [00:13<00:37,  1.42it/s] 27% 19/71 [00:14<00:39,  1.30it/s] 28% 20/71 [00:14<00:35,  1.43it/s] 30% 21/71 [00:15<00:38,  1.31it/s] 31% 22/71 [00:16<00:33,  1.44it/s] 32% 23/71 [00:17<00:36,  1.32it/s] 34% 24/71 [00:17<00:32,  1.44it/s] 35% 25/71 [00:18<00:35,  1.30it/s] 37% 26/71 [00:19<00:31,  1.43it/s] 38% 27/71 [00:20<00:33,  1.30it/s] 39% 28/71 [00:20<00:29,  1.44it/s] 41% 29/71 [00:21<00:32,  1.30it/s] 42% 30/71 [00:22<00:28,  1.44it/s] 44% 31/71 [00:22<00:30,  1.31it/s] 45% 32/71 [00:23<00:27,  1.44it/s] 46% 33/71 [00:24<00:28,  1.32it/s] 48% 34/71 [00:24<00:25,  1.44it/s] 49% 35/71 [00:25<00:27,  1.32it/s] 51% 36/71 [00:26<00:24,  1.46it/s] 52% 37/71 [00:27<00:26,  1.30it/s] 54% 38/71 [00:27<00:23,  1.43it/s] 55% 39/71 [00:28<00:24,  1.30it/s] 56% 40/71 [00:29<00:21,  1.42it/s] 58% 41/71 [00:30<00:23,  1.30it/s] 59% 42/71 [00:30<00:20,  1.43it/s] 61% 43/71 [00:31<00:21,  1.29it/s] 62% 44/71 [00:32<00:19,  1.41it/s] 63% 45/71 [00:33<00:19,  1.30it/s] 65% 46/71 [00:33<00:17,  1.43it/s] 66% 47/71 [00:34<00:18,  1.30it/s] 68% 48/71 [00:35<00:16,  1.43it/s] 69% 49/71 [00:36<00:17,  1.29it/s] 70% 50/71 [00:36<00:14,  1.43it/s] 72% 51/71 [00:37<00:15,  1.29it/s] 73% 52/71 [00:38<00:13,  1.41it/s] 75% 53/71 [00:39<00:13,  1.30it/s] 76% 54/71 [00:39<00:11,  1.42it/s] 77% 55/71 [00:40<00:12,  1.29it/s] 79% 56/71 [00:41<00:10,  1.41it/s] 80% 57/71 [00:42<00:10,  1.28it/s] 82% 58/71 [00:42<00:09,  1.39it/s] 83% 59/71 [00:43<00:09,  1.28it/s] 85% 60/71 [00:44<00:07,  1.41it/s] 86% 61/71 [00:45<00:07,  1.30it/s] 87% 62/71 [00:45<00:06,  1.43it/s] 89% 63/71 [00:46<00:06,  1.30it/s] 90% 64/71 [00:47<00:04,  1.43it/s] 92% 65/71 [00:48<00:04,  1.30it/s] 93% 66/71 [00:48<00:03,  1.42it/s] 94% 67/71 [00:49<00:03,  1.30it/s] 96% 68/71 [00:50<00:02,  1.43it/s] 97% 69/71 [00:50<00:01,  1.29it/s] 99% 70/71 [00:51<00:00,  1.42it/s]100% 71/71 [00:52<00:00,  1.46it/s]100% 71/71 [00:52<00:00,  1.36it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<00:37,  1.88it/s]  3% 2/71 [00:01<00:53,  1.30it/s]  4% 3/71 [00:02<00:45,  1.50it/s]  6% 4/71 [00:02<00:52,  1.28it/s]  7% 5/71 [00:03<00:45,  1.44it/s]  8% 6/71 [00:04<00:50,  1.30it/s] 10% 7/71 [00:04<00:44,  1.44it/s] 11% 8/71 [00:05<00:48,  1.30it/s] 13% 9/71 [00:06<00:43,  1.43it/s] 14% 10/71 [00:07<00:47,  1.30it/s] 15% 11/71 [00:07<00:42,  1.42it/s] 17% 12/71 [00:08<00:45,  1.30it/s] 18% 13/71 [00:09<00:40,  1.42it/s] 20% 14/71 [00:10<00:43,  1.31it/s] 21% 15/71 [00:10<00:38,  1.44it/s] 23% 16/71 [00:11<00:42,  1.30it/s] 24% 17/71 [00:12<00:38,  1.42it/s] 25% 18/71 [00:13<00:40,  1.30it/s] 27% 19/71 [00:13<00:36,  1.42it/s] 28% 20/71 [00:14<00:39,  1.30it/s] 30% 21/71 [00:15<00:35,  1.42it/s] 31% 22/71 [00:16<00:38,  1.29it/s] 32% 23/71 [00:16<00:33,  1.41it/s] 34% 24/71 [00:17<00:36,  1.29it/s] 35% 25/71 [00:18<00:32,  1.42it/s] 37% 26/71 [00:19<00:34,  1.29it/s] 38% 27/71 [00:19<00:31,  1.42it/s] 39% 28/71 [00:20<00:33,  1.29it/s] 41% 29/71 [00:21<00:29,  1.42it/s] 42% 30/71 [00:22<00:31,  1.30it/s] 44% 31/71 [00:22<00:27,  1.43it/s] 45% 32/71 [00:23<00:29,  1.31it/s] 46% 33/71 [00:24<00:26,  1.44it/s] 48% 34/71 [00:25<00:28,  1.29it/s] 49% 35/71 [00:25<00:25,  1.42it/s] 51% 36/71 [00:26<00:26,  1.30it/s] 52% 37/71 [00:27<00:23,  1.43it/s] 54% 38/71 [00:27<00:25,  1.30it/s] 55% 39/71 [00:28<00:22,  1.43it/s] 56% 40/71 [00:29<00:23,  1.30it/s] 58% 41/71 [00:30<00:21,  1.42it/s] 59% 42/71 [00:30<00:22,  1.30it/s] 61% 43/71 [00:31<00:19,  1.41it/s] 62% 44/71 [00:32<00:21,  1.29it/s] 63% 45/71 [00:32<00:18,  1.41it/s] 65% 46/71 [00:33<00:19,  1.27it/s] 66% 47/71 [00:34<00:17,  1.40it/s] 68% 48/71 [00:35<00:17,  1.28it/s] 69% 49/71 [00:35<00:15,  1.41it/s] 70% 50/71 [00:36<00:16,  1.30it/s] 72% 51/71 [00:37<00:14,  1.42it/s] 73% 52/71 [00:38<00:14,  1.30it/s] 75% 53/71 [00:38<00:12,  1.43it/s] 76% 54/71 [00:39<00:12,  1.31it/s] 77% 55/71 [00:40<00:11,  1.45it/s] 79% 56/71 [00:41<00:11,  1.32it/s] 80% 57/71 [00:41<00:09,  1.44it/s] 82% 58/71 [00:42<00:09,  1.31it/s] 83% 59/71 [00:43<00:08,  1.43it/s] 85% 60/71 [00:44<00:08,  1.30it/s] 86% 61/71 [00:44<00:06,  1.44it/s] 87% 62/71 [00:45<00:06,  1.31it/s] 89% 63/71 [00:46<00:05,  1.43it/s] 90% 64/71 [00:47<00:05,  1.31it/s] 92% 65/71 [00:47<00:04,  1.43it/s] 93% 66/71 [00:48<00:03,  1.31it/s] 94% 67/71 [00:49<00:02,  1.43it/s] 96% 68/71 [00:50<00:02,  1.30it/s] 97% 69/71 [00:50<00:01,  1.43it/s] 99% 70/71 [00:51<00:00,  1.31it/s]100% 71/71 [00:51<00:00,  1.62it/s]100% 71/71 [00:51<00:00,  1.37it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<01:02,  1.13it/s]  3% 2/71 [00:01<00:47,  1.46it/s]  4% 3/71 [00:02<00:53,  1.27it/s]  6% 4/71 [00:02<00:46,  1.43it/s]  7% 5/71 [00:03<00:52,  1.26it/s]  8% 6/71 [00:04<00:46,  1.41it/s] 10% 7/71 [00:05<00:49,  1.29it/s] 11% 8/71 [00:05<00:44,  1.41it/s] 13% 9/71 [00:06<00:48,  1.27it/s] 14% 10/71 [00:07<00:43,  1.40it/s] 15% 11/71 [00:08<00:46,  1.29it/s] 17% 12/71 [00:08<00:41,  1.42it/s] 18% 13/71 [00:09<00:44,  1.31it/s] 20% 14/71 [00:10<00:39,  1.44it/s] 21% 15/71 [00:11<00:42,  1.31it/s] 23% 16/71 [00:11<00:38,  1.44it/s] 24% 17/71 [00:12<00:41,  1.31it/s] 25% 18/71 [00:13<00:36,  1.44it/s] 27% 19/71 [00:14<00:39,  1.31it/s] 28% 20/71 [00:14<00:35,  1.44it/s] 30% 21/71 [00:15<00:38,  1.30it/s] 31% 22/71 [00:16<00:34,  1.42it/s] 32% 23/71 [00:17<00:36,  1.31it/s] 34% 24/71 [00:17<00:32,  1.44it/s] 35% 25/71 [00:18<00:34,  1.31it/s] 37% 26/71 [00:19<00:30,  1.45it/s] 38% 27/71 [00:19<00:33,  1.33it/s] 39% 28/71 [00:20<00:29,  1.47it/s] 41% 29/71 [00:21<00:32,  1.31it/s] 42% 30/71 [00:21<00:28,  1.42it/s] 44% 31/71 [00:22<00:30,  1.29it/s] 45% 32/71 [00:23<00:27,  1.42it/s] 46% 33/71 [00:24<00:29,  1.30it/s] 48% 34/71 [00:24<00:26,  1.42it/s] 49% 35/71 [00:25<00:27,  1.31it/s] 51% 36/71 [00:26<00:24,  1.44it/s] 52% 37/71 [00:27<00:26,  1.31it/s] 54% 38/71 [00:27<00:23,  1.42it/s] 55% 39/71 [00:28<00:25,  1.28it/s] 56% 40/71 [00:29<00:22,  1.40it/s] 58% 41/71 [00:30<00:23,  1.27it/s] 59% 42/71 [00:30<00:20,  1.40it/s] 61% 43/71 [00:31<00:21,  1.29it/s] 62% 44/71 [00:32<00:19,  1.42it/s] 63% 45/71 [00:33<00:20,  1.29it/s] 65% 46/71 [00:33<00:17,  1.41it/s] 66% 47/71 [00:34<00:18,  1.30it/s] 68% 48/71 [00:35<00:16,  1.42it/s] 69% 49/71 [00:36<00:17,  1.28it/s] 70% 50/71 [00:36<00:15,  1.40it/s] 72% 51/71 [00:37<00:15,  1.30it/s] 73% 52/71 [00:38<00:13,  1.43it/s] 75% 53/71 [00:39<00:14,  1.28it/s] 76% 54/71 [00:39<00:11,  1.42it/s] 77% 55/71 [00:40<00:12,  1.30it/s] 79% 56/71 [00:41<00:10,  1.43it/s] 80% 57/71 [00:42<00:10,  1.31it/s] 82% 58/71 [00:42<00:09,  1.44it/s] 83% 59/71 [00:43<00:09,  1.29it/s] 85% 60/71 [00:44<00:07,  1.43it/s] 86% 61/71 [00:45<00:07,  1.31it/s] 87% 62/71 [00:45<00:06,  1.43it/s] 89% 63/71 [00:46<00:06,  1.30it/s] 90% 64/71 [00:47<00:04,  1.43it/s] 92% 65/71 [00:48<00:04,  1.29it/s] 93% 66/71 [00:48<00:03,  1.42it/s] 94% 67/71 [00:49<00:03,  1.30it/s] 96% 68/71 [00:50<00:02,  1.43it/s] 97% 69/71 [00:50<00:01,  1.31it/s] 99% 70/71 [00:51<00:00,  1.43it/s]100% 71/71 [00:52<00:00,  1.45it/s]100% 71/71 [00:52<00:00,  1.36it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<00:37,  1.86it/s]  3% 2/71 [00:01<00:52,  1.31it/s]  4% 3/71 [00:01<00:44,  1.52it/s]  6% 4/71 [00:02<00:51,  1.31it/s]  7% 5/71 [00:03<00:45,  1.46it/s]  8% 6/71 [00:04<00:49,  1.31it/s] 10% 7/71 [00:04<00:44,  1.45it/s] 11% 8/71 [00:05<00:48,  1.31it/s] 13% 9/71 [00:06<00:42,  1.44it/s] 14% 10/71 [00:07<00:46,  1.31it/s] 15% 11/71 [00:07<00:41,  1.43it/s] 17% 12/71 [00:08<00:45,  1.30it/s] 18% 13/71 [00:09<00:40,  1.44it/s] 20% 14/71 [00:10<00:43,  1.31it/s] 21% 15/71 [00:10<00:38,  1.45it/s] 23% 16/71 [00:11<00:42,  1.30it/s] 24% 17/71 [00:12<00:37,  1.43it/s] 25% 18/71 [00:13<00:40,  1.32it/s] 27% 19/71 [00:13<00:35,  1.45it/s] 28% 20/71 [00:14<00:39,  1.31it/s] 30% 21/71 [00:15<00:34,  1.44it/s] 31% 22/71 [00:16<00:37,  1.32it/s] 32% 23/71 [00:16<00:33,  1.44it/s] 34% 24/71 [00:17<00:35,  1.31it/s] 35% 25/71 [00:18<00:31,  1.45it/s] 37% 26/71 [00:18<00:34,  1.30it/s] 38% 27/71 [00:19<00:30,  1.43it/s] 39% 28/71 [00:20<00:32,  1.30it/s] 41% 29/71 [00:20<00:29,  1.43it/s] 42% 30/71 [00:21<00:31,  1.31it/s] 44% 31/71 [00:22<00:27,  1.43it/s] 45% 32/71 [00:23<00:29,  1.31it/s] 46% 33/71 [00:23<00:26,  1.43it/s] 48% 34/71 [00:24<00:28,  1.31it/s] 49% 35/71 [00:25<00:25,  1.43it/s] 51% 36/71 [00:26<00:26,  1.31it/s] 52% 37/71 [00:26<00:23,  1.43it/s] 54% 38/71 [00:27<00:25,  1.30it/s] 55% 39/71 [00:28<00:22,  1.42it/s] 56% 40/71 [00:29<00:23,  1.30it/s] 58% 41/71 [00:29<00:21,  1.43it/s] 59% 42/71 [00:30<00:22,  1.30it/s] 61% 43/71 [00:31<00:19,  1.44it/s] 62% 44/71 [00:32<00:20,  1.31it/s] 63% 45/71 [00:32<00:18,  1.44it/s] 65% 46/71 [00:33<00:19,  1.29it/s] 66% 47/71 [00:34<00:16,  1.42it/s] 68% 48/71 [00:35<00:17,  1.29it/s] 69% 49/71 [00:35<00:15,  1.42it/s] 70% 50/71 [00:36<00:16,  1.29it/s] 72% 51/71 [00:37<00:14,  1.42it/s] 73% 52/71 [00:38<00:14,  1.29it/s] 75% 53/71 [00:38<00:12,  1.42it/s] 76% 54/71 [00:39<00:12,  1.31it/s] 77% 55/71 [00:40<00:11,  1.43it/s] 79% 56/71 [00:40<00:11,  1.30it/s] 80% 57/71 [00:41<00:09,  1.42it/s] 82% 58/71 [00:42<00:10,  1.30it/s] 83% 59/71 [00:43<00:08,  1.43it/s] 85% 60/71 [00:43<00:08,  1.31it/s] 86% 61/71 [00:44<00:07,  1.43it/s] 87% 62/71 [00:45<00:06,  1.30it/s] 89% 63/71 [00:45<00:05,  1.43it/s] 90% 64/71 [00:46<00:05,  1.31it/s] 92% 65/71 [00:47<00:04,  1.43it/s] 93% 66/71 [00:48<00:03,  1.30it/s] 94% 67/71 [00:48<00:02,  1.43it/s] 96% 68/71 [00:49<00:02,  1.30it/s] 97% 69/71 [00:50<00:01,  1.43it/s] 99% 70/71 [00:51<00:00,  1.30it/s]100% 71/71 [00:51<00:00,  1.63it/s]100% 71/71 [00:51<00:00,  1.38it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<01:04,  1.08it/s]  3% 2/71 [00:01<00:49,  1.41it/s]  4% 3/71 [00:02<00:54,  1.24it/s]  6% 4/71 [00:02<00:46,  1.44it/s]  7% 5/71 [00:03<00:50,  1.30it/s]  8% 6/71 [00:04<00:44,  1.44it/s] 10% 7/71 [00:05<00:49,  1.30it/s] 11% 8/71 [00:05<00:44,  1.43it/s] 13% 9/71 [00:06<00:47,  1.29it/s] 14% 10/71 [00:07<00:43,  1.41it/s] 15% 11/71 [00:08<00:46,  1.29it/s] 17% 12/71 [00:08<00:41,  1.41it/s] 18% 13/71 [00:09<00:45,  1.29it/s] 20% 14/71 [00:10<00:40,  1.41it/s] 21% 15/71 [00:11<00:43,  1.29it/s] 23% 16/71 [00:11<00:38,  1.43it/s] 24% 17/71 [00:12<00:41,  1.30it/s] 25% 18/71 [00:13<00:37,  1.41it/s] 27% 19/71 [00:14<00:40,  1.29it/s] 28% 20/71 [00:14<00:36,  1.41it/s] 30% 21/71 [00:15<00:38,  1.29it/s] 31% 22/71 [00:16<00:34,  1.40it/s] 32% 23/71 [00:17<00:37,  1.27it/s] 34% 24/71 [00:17<00:33,  1.39it/s] 35% 25/71 [00:18<00:36,  1.27it/s] 37% 26/71 [00:19<00:32,  1.41it/s] 38% 27/71 [00:20<00:34,  1.28it/s] 39% 28/71 [00:20<00:30,  1.40it/s] 41% 29/71 [00:21<00:32,  1.28it/s] 42% 30/71 [00:22<00:29,  1.40it/s] 44% 31/71 [00:23<00:31,  1.27it/s] 45% 32/71 [00:23<00:27,  1.40it/s] 46% 33/71 [00:24<00:30,  1.26it/s] 48% 34/71 [00:25<00:26,  1.39it/s] 49% 35/71 [00:26<00:28,  1.28it/s] 51% 36/71 [00:26<00:24,  1.41it/s] 52% 37/71 [00:27<00:26,  1.30it/s] 54% 38/71 [00:28<00:23,  1.42it/s] 55% 39/71 [00:29<00:24,  1.28it/s] 56% 40/71 [00:29<00:22,  1.41it/s] 58% 41/71 [00:30<00:23,  1.29it/s] 59% 42/71 [00:31<00:20,  1.41it/s] 61% 43/71 [00:32<00:21,  1.28it/s] 62% 44/71 [00:32<00:19,  1.40it/s] 63% 45/71 [00:33<00:20,  1.28it/s] 65% 46/71 [00:34<00:17,  1.40it/s] 66% 47/71 [00:35<00:18,  1.29it/s] 68% 48/71 [00:35<00:16,  1.42it/s] 69% 49/71 [00:36<00:17,  1.26it/s] 70% 50/71 [00:37<00:15,  1.38it/s] 72% 51/71 [00:38<00:15,  1.28it/s] 73% 52/71 [00:38<00:13,  1.40it/s] 75% 53/71 [00:39<00:13,  1.29it/s] 76% 54/71 [00:40<00:12,  1.41it/s] 77% 55/71 [00:41<00:12,  1.30it/s] 79% 56/71 [00:41<00:10,  1.42it/s] 80% 57/71 [00:42<00:10,  1.29it/s] 82% 58/71 [00:43<00:09,  1.41it/s] 83% 59/71 [00:44<00:09,  1.29it/s] 85% 60/71 [00:44<00:07,  1.42it/s] 86% 61/71 [00:45<00:07,  1.29it/s] 87% 62/71 [00:46<00:06,  1.41it/s] 89% 63/71 [00:46<00:06,  1.30it/s] 90% 64/71 [00:47<00:04,  1.42it/s] 92% 65/71 [00:48<00:04,  1.28it/s] 93% 66/71 [00:49<00:03,  1.40it/s] 94% 67/71 [00:49<00:03,  1.28it/s] 96% 68/71 [00:50<00:02,  1.40it/s] 97% 69/71 [00:51<00:01,  1.29it/s] 99% 70/71 [00:52<00:00,  1.41it/s]100% 71/71 [00:52<00:00,  1.45it/s]100% 71/71 [00:52<00:00,  1.35it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<00:38,  1.81it/s]  3% 2/71 [00:01<00:53,  1.30it/s]  4% 3/71 [00:02<00:45,  1.50it/s]  6% 4/71 [00:03<00:53,  1.26it/s]  7% 5/71 [00:03<00:46,  1.43it/s]  8% 6/71 [00:04<00:50,  1.29it/s] 10% 7/71 [00:05<00:44,  1.43it/s] 11% 8/71 [00:05<00:49,  1.29it/s] 13% 9/71 [00:06<00:43,  1.41it/s] 14% 10/71 [00:07<00:47,  1.28it/s] 15% 11/71 [00:08<00:42,  1.40it/s] 17% 12/71 [00:08<00:45,  1.29it/s] 18% 13/71 [00:09<00:40,  1.42it/s] 20% 14/71 [00:10<00:43,  1.30it/s] 21% 15/71 [00:10<00:38,  1.44it/s] 23% 16/71 [00:11<00:41,  1.32it/s] 24% 17/71 [00:12<00:37,  1.45it/s] 25% 18/71 [00:13<00:41,  1.29it/s] 27% 19/71 [00:13<00:36,  1.41it/s] 28% 20/71 [00:14<00:39,  1.29it/s] 30% 21/71 [00:15<00:35,  1.42it/s] 31% 22/71 [00:16<00:37,  1.30it/s] 32% 23/71 [00:16<00:33,  1.41it/s] 34% 24/71 [00:17<00:36,  1.28it/s] 35% 25/71 [00:18<00:32,  1.41it/s] 37% 26/71 [00:19<00:35,  1.27it/s] 38% 27/71 [00:19<00:31,  1.39it/s] 39% 28/71 [00:20<00:33,  1.27it/s] 41% 29/71 [00:21<00:30,  1.40it/s] 42% 30/71 [00:22<00:31,  1.29it/s] 44% 31/71 [00:22<00:28,  1.42it/s] 45% 32/71 [00:23<00:30,  1.29it/s] 46% 33/71 [00:24<00:26,  1.43it/s] 48% 34/71 [00:25<00:28,  1.29it/s] 49% 35/71 [00:25<00:25,  1.42it/s] 51% 36/71 [00:26<00:26,  1.30it/s] 52% 37/71 [00:27<00:23,  1.42it/s] 54% 38/71 [00:28<00:25,  1.30it/s] 55% 39/71 [00:28<00:22,  1.42it/s] 56% 40/71 [00:29<00:23,  1.29it/s] 58% 41/71 [00:30<00:21,  1.41it/s] 59% 42/71 [00:31<00:22,  1.28it/s] 61% 43/71 [00:31<00:19,  1.40it/s] 62% 44/71 [00:32<00:21,  1.27it/s] 63% 45/71 [00:33<00:18,  1.41it/s] 65% 46/71 [00:34<00:19,  1.28it/s] 66% 47/71 [00:34<00:16,  1.41it/s] 68% 48/71 [00:35<00:18,  1.28it/s] 69% 49/71 [00:36<00:15,  1.41it/s] 70% 50/71 [00:37<00:16,  1.29it/s] 72% 51/71 [00:37<00:14,  1.43it/s] 73% 52/71 [00:38<00:14,  1.30it/s] 75% 53/71 [00:39<00:12,  1.43it/s] 76% 54/71 [00:39<00:12,  1.32it/s] 77% 55/71 [00:40<00:11,  1.45it/s] 79% 56/71 [00:41<00:11,  1.31it/s] 80% 57/71 [00:41<00:09,  1.44it/s] 82% 58/71 [00:42<00:09,  1.31it/s] 83% 59/71 [00:43<00:08,  1.43it/s] 85% 60/71 [00:44<00:08,  1.29it/s] 86% 61/71 [00:44<00:07,  1.41it/s] 87% 62/71 [00:45<00:06,  1.29it/s] 89% 63/71 [00:46<00:05,  1.41it/s] 90% 64/71 [00:47<00:05,  1.29it/s] 92% 65/71 [00:47<00:04,  1.42it/s] 93% 66/71 [00:48<00:03,  1.30it/s] 94% 67/71 [00:49<00:02,  1.44it/s] 96% 68/71 [00:50<00:02,  1.31it/s] 97% 69/71 [00:50<00:01,  1.45it/s] 99% 70/71 [00:51<00:00,  1.32it/s]100% 71/71 [00:51<00:00,  1.64it/s]100% 71/71 [00:51<00:00,  1.37it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<01:06,  1.05it/s]  3% 2/71 [00:01<00:48,  1.41it/s]  4% 3/71 [00:02<00:55,  1.24it/s]  6% 4/71 [00:02<00:46,  1.43it/s]  7% 5/71 [00:03<00:51,  1.29it/s]  8% 6/71 [00:04<00:45,  1.42it/s] 10% 7/71 [00:05<00:49,  1.29it/s] 11% 8/71 [00:05<00:44,  1.43it/s] 13% 9/71 [00:06<00:47,  1.30it/s] 14% 10/71 [00:07<00:43,  1.42it/s] 15% 11/71 [00:08<00:46,  1.30it/s] 17% 12/71 [00:08<00:41,  1.42it/s] 18% 13/71 [00:09<00:44,  1.30it/s] 20% 14/71 [00:10<00:40,  1.42it/s] 21% 15/71 [00:11<00:43,  1.29it/s] 23% 16/71 [00:11<00:38,  1.41it/s] 24% 17/71 [00:12<00:41,  1.31it/s] 25% 18/71 [00:13<00:37,  1.43it/s] 27% 19/71 [00:14<00:39,  1.30it/s] 28% 20/71 [00:14<00:35,  1.43it/s] 30% 21/71 [00:15<00:38,  1.30it/s] 31% 22/71 [00:16<00:34,  1.43it/s] 32% 23/71 [00:17<00:37,  1.29it/s] 34% 24/71 [00:17<00:32,  1.42it/s] 35% 25/71 [00:18<00:35,  1.30it/s] 37% 26/71 [00:19<00:31,  1.42it/s] 38% 27/71 [00:20<00:33,  1.30it/s] 39% 28/71 [00:20<00:30,  1.41it/s] 41% 29/71 [00:21<00:32,  1.29it/s] 42% 30/71 [00:22<00:29,  1.41it/s] 44% 31/71 [00:23<00:31,  1.28it/s] 45% 32/71 [00:23<00:27,  1.40it/s] 46% 33/71 [00:24<00:29,  1.30it/s] 48% 34/71 [00:25<00:25,  1.43it/s] 49% 35/71 [00:25<00:27,  1.32it/s] 51% 36/71 [00:26<00:24,  1.44it/s] 52% 37/71 [00:27<00:25,  1.32it/s] 54% 38/71 [00:27<00:22,  1.44it/s] 55% 39/71 [00:28<00:24,  1.31it/s] 56% 40/71 [00:29<00:21,  1.44it/s] 58% 41/71 [00:30<00:22,  1.31it/s] 59% 42/71 [00:30<00:20,  1.42it/s] 61% 43/71 [00:31<00:21,  1.29it/s] 62% 44/71 [00:32<00:19,  1.40it/s] 63% 45/71 [00:33<00:20,  1.29it/s] 65% 46/71 [00:33<00:17,  1.42it/s] 66% 47/71 [00:34<00:18,  1.31it/s] 68% 48/71 [00:35<00:16,  1.41it/s] 69% 49/71 [00:36<00:16,  1.30it/s] 70% 50/71 [00:36<00:14,  1.43it/s] 72% 51/71 [00:37<00:15,  1.28it/s] 73% 52/71 [00:38<00:13,  1.41it/s] 75% 53/71 [00:39<00:13,  1.29it/s] 76% 54/71 [00:39<00:12,  1.41it/s] 77% 55/71 [00:40<00:12,  1.29it/s] 79% 56/71 [00:41<00:10,  1.41it/s] 80% 57/71 [00:42<00:10,  1.28it/s] 82% 58/71 [00:42<00:09,  1.41it/s] 83% 59/71 [00:43<00:09,  1.29it/s] 85% 60/71 [00:44<00:07,  1.41it/s] 86% 61/71 [00:45<00:07,  1.29it/s] 87% 62/71 [00:45<00:06,  1.42it/s] 89% 63/71 [00:46<00:06,  1.30it/s] 90% 64/71 [00:47<00:04,  1.41it/s] 92% 65/71 [00:48<00:04,  1.27it/s] 93% 66/71 [00:48<00:03,  1.40it/s] 94% 67/71 [00:49<00:03,  1.27it/s] 96% 68/71 [00:50<00:02,  1.41it/s] 97% 69/71 [00:51<00:01,  1.27it/s] 99% 70/71 [00:51<00:00,  1.40it/s]100% 71/71 [00:52<00:00,  1.45it/s]100% 71/71 [00:52<00:00,  1.36it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<00:36,  1.89it/s]  3% 2/71 [00:01<00:52,  1.32it/s]  4% 3/71 [00:01<00:44,  1.52it/s]  6% 4/71 [00:02<00:51,  1.31it/s]  7% 5/71 [00:03<00:45,  1.46it/s]  8% 6/71 [00:04<00:49,  1.32it/s] 10% 7/71 [00:04<00:43,  1.46it/s] 11% 8/71 [00:05<00:48,  1.31it/s] 13% 9/71 [00:06<00:43,  1.43it/s] 14% 10/71 [00:07<00:46,  1.31it/s] 15% 11/71 [00:07<00:41,  1.44it/s] 17% 12/71 [00:08<00:44,  1.31it/s] 18% 13/71 [00:09<00:40,  1.43it/s] 20% 14/71 [00:10<00:43,  1.30it/s] 21% 15/71 [00:10<00:39,  1.43it/s] 23% 16/71 [00:11<00:42,  1.30it/s] 24% 17/71 [00:12<00:37,  1.43it/s] 25% 18/71 [00:13<00:40,  1.32it/s] 27% 19/71 [00:13<00:36,  1.44it/s] 28% 20/71 [00:14<00:38,  1.32it/s] 30% 21/71 [00:15<00:34,  1.45it/s] 31% 22/71 [00:16<00:37,  1.32it/s] 32% 23/71 [00:16<00:33,  1.45it/s] 34% 24/71 [00:17<00:36,  1.30it/s] 35% 25/71 [00:18<00:32,  1.43it/s] 37% 26/71 [00:19<00:35,  1.28it/s] 38% 27/71 [00:19<00:31,  1.41it/s] 39% 28/71 [00:20<00:33,  1.28it/s] 41% 29/71 [00:21<00:29,  1.42it/s] 42% 30/71 [00:21<00:31,  1.30it/s] 44% 31/71 [00:22<00:27,  1.43it/s] 45% 32/71 [00:23<00:29,  1.30it/s] 46% 33/71 [00:23<00:26,  1.43it/s] 48% 34/71 [00:24<00:28,  1.31it/s] 49% 35/71 [00:25<00:25,  1.43it/s] 51% 36/71 [00:26<00:26,  1.31it/s] 52% 37/71 [00:26<00:23,  1.42it/s] 54% 38/71 [00:27<00:25,  1.30it/s] 55% 39/71 [00:28<00:22,  1.42it/s] 56% 40/71 [00:29<00:23,  1.30it/s] 58% 41/71 [00:29<00:20,  1.43it/s] 59% 42/71 [00:30<00:22,  1.29it/s] 61% 43/71 [00:31<00:19,  1.42it/s] 62% 44/71 [00:32<00:20,  1.29it/s] 63% 45/71 [00:32<00:18,  1.43it/s] 65% 46/71 [00:33<00:19,  1.30it/s] 66% 47/71 [00:34<00:16,  1.44it/s] 68% 48/71 [00:35<00:17,  1.30it/s] 69% 49/71 [00:35<00:15,  1.43it/s] 70% 50/71 [00:36<00:16,  1.30it/s] 72% 51/71 [00:37<00:13,  1.43it/s] 73% 52/71 [00:38<00:14,  1.30it/s] 75% 53/71 [00:38<00:12,  1.42it/s] 76% 54/71 [00:39<00:13,  1.30it/s] 77% 55/71 [00:40<00:11,  1.42it/s] 79% 56/71 [00:41<00:11,  1.28it/s] 80% 57/71 [00:41<00:09,  1.41it/s] 82% 58/71 [00:42<00:10,  1.29it/s] 83% 59/71 [00:43<00:08,  1.41it/s] 85% 60/71 [00:44<00:08,  1.29it/s] 86% 61/71 [00:44<00:07,  1.41it/s] 87% 62/71 [00:45<00:06,  1.30it/s] 89% 63/71 [00:46<00:05,  1.42it/s] 90% 64/71 [00:47<00:05,  1.29it/s] 92% 65/71 [00:47<00:04,  1.41it/s] 93% 66/71 [00:48<00:03,  1.30it/s] 94% 67/71 [00:49<00:02,  1.43it/s] 96% 68/71 [00:49<00:02,  1.30it/s] 97% 69/71 [00:50<00:01,  1.42it/s] 99% 70/71 [00:51<00:00,  1.30it/s]100% 71/71 [00:51<00:00,  1.62it/s]100% 71/71 [00:51<00:00,  1.37it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<01:04,  1.08it/s]  3% 2/71 [00:01<00:48,  1.44it/s]  4% 3/71 [00:02<00:54,  1.26it/s]  6% 4/71 [00:02<00:46,  1.44it/s]  7% 5/71 [00:03<00:51,  1.29it/s]  8% 6/71 [00:04<00:45,  1.43it/s] 10% 7/71 [00:05<00:50,  1.28it/s] 11% 8/71 [00:05<00:44,  1.41it/s] 13% 9/71 [00:06<00:47,  1.29it/s] 14% 10/71 [00:07<00:43,  1.42it/s] 15% 11/71 [00:08<00:46,  1.30it/s] 17% 12/71 [00:08<00:41,  1.43it/s] 18% 13/71 [00:09<00:44,  1.30it/s] 20% 14/71 [00:10<00:40,  1.42it/s] 21% 15/71 [00:11<00:43,  1.29it/s] 23% 16/71 [00:11<00:38,  1.42it/s] 24% 17/71 [00:12<00:41,  1.30it/s] 25% 18/71 [00:13<00:36,  1.44it/s] 27% 19/71 [00:14<00:39,  1.32it/s] 28% 20/71 [00:14<00:35,  1.45it/s] 30% 21/71 [00:15<00:38,  1.31it/s] 31% 22/71 [00:16<00:34,  1.44it/s] 32% 23/71 [00:17<00:37,  1.29it/s] 34% 24/71 [00:17<00:33,  1.42it/s] 35% 25/71 [00:18<00:35,  1.30it/s] 37% 26/71 [00:19<00:31,  1.43it/s] 38% 27/71 [00:20<00:33,  1.31it/s] 39% 28/71 [00:20<00:29,  1.44it/s] 41% 29/71 [00:21<00:32,  1.30it/s] 42% 30/71 [00:22<00:28,  1.43it/s] 44% 31/71 [00:22<00:30,  1.31it/s] 45% 32/71 [00:23<00:27,  1.44it/s] 46% 33/71 [00:24<00:29,  1.30it/s] 48% 34/71 [00:24<00:25,  1.43it/s] 49% 35/71 [00:25<00:27,  1.31it/s] 51% 36/71 [00:26<00:24,  1.44it/s] 52% 37/71 [00:27<00:25,  1.31it/s] 54% 38/71 [00:27<00:23,  1.43it/s] 55% 39/71 [00:28<00:24,  1.31it/s] 56% 40/71 [00:29<00:21,  1.44it/s] 58% 41/71 [00:30<00:22,  1.31it/s] 59% 42/71 [00:30<00:20,  1.44it/s] 61% 43/71 [00:31<00:21,  1.31it/s] 62% 44/71 [00:32<00:18,  1.43it/s] 63% 45/71 [00:33<00:20,  1.30it/s] 65% 46/71 [00:33<00:17,  1.42it/s] 66% 47/71 [00:34<00:18,  1.29it/s] 68% 48/71 [00:35<00:16,  1.41it/s] 69% 49/71 [00:36<00:17,  1.29it/s] 70% 50/71 [00:36<00:14,  1.42it/s] 72% 51/71 [00:37<00:15,  1.28it/s] 73% 52/71 [00:38<00:13,  1.41it/s] 75% 53/71 [00:39<00:13,  1.30it/s] 76% 54/71 [00:39<00:11,  1.43it/s] 77% 55/71 [00:40<00:12,  1.32it/s] 79% 56/71 [00:41<00:10,  1.44it/s] 80% 57/71 [00:41<00:10,  1.32it/s] 82% 58/71 [00:42<00:08,  1.45it/s] 83% 59/71 [00:43<00:09,  1.32it/s] 85% 60/71 [00:43<00:07,  1.44it/s] 86% 61/71 [00:44<00:07,  1.31it/s] 87% 62/71 [00:45<00:06,  1.44it/s] 89% 63/71 [00:46<00:06,  1.30it/s] 90% 64/71 [00:46<00:04,  1.43it/s] 92% 65/71 [00:47<00:04,  1.30it/s] 93% 66/71 [00:48<00:03,  1.43it/s] 94% 67/71 [00:49<00:03,  1.29it/s] 96% 68/71 [00:49<00:02,  1.41it/s] 97% 69/71 [00:50<00:01,  1.30it/s] 99% 70/71 [00:51<00:00,  1.43it/s]100% 71/71 [00:51<00:00,  1.46it/s]100% 71/71 [00:51<00:00,  1.37it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<00:38,  1.82it/s]  3% 2/71 [00:01<00:52,  1.32it/s]  4% 3/71 [00:01<00:44,  1.52it/s]  6% 4/71 [00:02<00:50,  1.32it/s]  7% 5/71 [00:03<00:44,  1.48it/s]  8% 6/71 [00:04<00:49,  1.32it/s] 10% 7/71 [00:04<00:43,  1.46it/s] 11% 8/71 [00:05<00:47,  1.32it/s] 13% 9/71 [00:06<00:42,  1.45it/s] 14% 10/71 [00:07<00:46,  1.30it/s] 15% 11/71 [00:07<00:41,  1.44it/s] 17% 12/71 [00:08<00:44,  1.33it/s] 18% 13/71 [00:09<00:39,  1.46it/s] 20% 14/71 [00:10<00:43,  1.30it/s] 21% 15/71 [00:10<00:39,  1.42it/s] 23% 16/71 [00:11<00:42,  1.30it/s] 24% 17/71 [00:12<00:37,  1.42it/s] 25% 18/71 [00:13<00:40,  1.30it/s] 27% 19/71 [00:13<00:36,  1.42it/s] 28% 20/71 [00:14<00:39,  1.30it/s] 30% 21/71 [00:15<00:34,  1.43it/s] 31% 22/71 [00:16<00:37,  1.30it/s] 32% 23/71 [00:16<00:33,  1.43it/s] 34% 24/71 [00:17<00:35,  1.31it/s] 35% 25/71 [00:18<00:31,  1.45it/s] 37% 26/71 [00:18<00:33,  1.33it/s] 38% 27/71 [00:19<00:30,  1.46it/s] 39% 28/71 [00:20<00:32,  1.32it/s] 41% 29/71 [00:20<00:28,  1.46it/s] 42% 30/71 [00:21<00:31,  1.30it/s] 44% 31/71 [00:22<00:27,  1.43it/s] 45% 32/71 [00:23<00:30,  1.29it/s] 46% 33/71 [00:23<00:26,  1.42it/s] 48% 34/71 [00:24<00:28,  1.30it/s] 49% 35/71 [00:25<00:25,  1.43it/s] 51% 36/71 [00:26<00:26,  1.30it/s] 52% 37/71 [00:26<00:23,  1.43it/s] 54% 38/71 [00:27<00:25,  1.30it/s] 55% 39/71 [00:28<00:22,  1.44it/s] 56% 40/71 [00:29<00:23,  1.30it/s] 58% 41/71 [00:29<00:20,  1.43it/s] 59% 42/71 [00:30<00:22,  1.30it/s] 61% 43/71 [00:31<00:19,  1.42it/s] 62% 44/71 [00:32<00:20,  1.31it/s] 63% 45/71 [00:32<00:18,  1.43it/s] 65% 46/71 [00:33<00:19,  1.29it/s] 66% 47/71 [00:34<00:16,  1.42it/s] 68% 48/71 [00:35<00:17,  1.31it/s] 69% 49/71 [00:35<00:15,  1.43it/s] 70% 50/71 [00:36<00:16,  1.28it/s] 72% 51/71 [00:37<00:14,  1.41it/s] 73% 52/71 [00:38<00:14,  1.29it/s] 75% 53/71 [00:38<00:12,  1.42it/s] 76% 54/71 [00:39<00:13,  1.29it/s] 77% 55/71 [00:40<00:11,  1.42it/s] 79% 56/71 [00:41<00:11,  1.30it/s] 80% 57/71 [00:41<00:09,  1.43it/s] 82% 58/71 [00:42<00:09,  1.30it/s] 83% 59/71 [00:42<00:08,  1.44it/s] 85% 60/71 [00:43<00:08,  1.30it/s] 86% 61/71 [00:44<00:06,  1.43it/s] 87% 62/71 [00:45<00:07,  1.28it/s] 89% 63/71 [00:45<00:05,  1.42it/s] 90% 64/71 [00:46<00:05,  1.29it/s] 92% 65/71 [00:47<00:04,  1.42it/s] 93% 66/71 [00:48<00:03,  1.29it/s] 94% 67/71 [00:48<00:02,  1.42it/s] 96% 68/71 [00:49<00:02,  1.29it/s] 97% 69/71 [00:50<00:01,  1.42it/s] 99% 70/71 [00:51<00:00,  1.30it/s]100% 71/71 [00:51<00:00,  1.61it/s]100% 71/71 [00:51<00:00,  1.38it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<01:04,  1.08it/s]  3% 2/71 [00:01<00:48,  1.43it/s]  4% 3/71 [00:02<00:54,  1.24it/s]  6% 4/71 [00:02<00:46,  1.43it/s]  7% 5/71 [00:03<00:53,  1.24it/s]  8% 6/71 [00:04<00:46,  1.40it/s] 10% 7/71 [00:05<00:50,  1.27it/s] 11% 8/71 [00:05<00:44,  1.41it/s] 13% 9/71 [00:06<00:47,  1.29it/s] 14% 10/71 [00:07<00:42,  1.42it/s] 15% 11/71 [00:08<00:46,  1.30it/s] 17% 12/71 [00:08<00:41,  1.43it/s] 18% 13/71 [00:09<00:44,  1.29it/s] 20% 14/71 [00:10<00:40,  1.42it/s] 21% 15/71 [00:11<00:43,  1.29it/s] 23% 16/71 [00:11<00:38,  1.43it/s] 24% 17/71 [00:12<00:41,  1.31it/s] 25% 18/71 [00:13<00:36,  1.44it/s] 27% 19/71 [00:14<00:40,  1.30it/s] 28% 20/71 [00:14<00:35,  1.42it/s] 30% 21/71 [00:15<00:38,  1.29it/s] 31% 22/71 [00:16<00:34,  1.41it/s] 32% 23/71 [00:17<00:36,  1.30it/s] 34% 24/71 [00:17<00:32,  1.44it/s] 35% 25/71 [00:18<00:34,  1.33it/s] 37% 26/71 [00:19<00:30,  1.46it/s] 38% 27/71 [00:19<00:33,  1.33it/s] 39% 28/71 [00:20<00:29,  1.45it/s] 41% 29/71 [00:21<00:31,  1.32it/s] 42% 30/71 [00:21<00:28,  1.45it/s] 44% 31/71 [00:22<00:30,  1.31it/s] 45% 32/71 [00:23<00:27,  1.43it/s] 46% 33/71 [00:24<00:29,  1.31it/s] 48% 34/71 [00:24<00:25,  1.44it/s] 49% 35/71 [00:25<00:27,  1.30it/s] 51% 36/71 [00:26<00:24,  1.42it/s] 52% 37/71 [00:27<00:25,  1.31it/s] 54% 38/71 [00:27<00:22,  1.44it/s] 55% 39/71 [00:28<00:24,  1.30it/s] 56% 40/71 [00:29<00:21,  1.42it/s] 58% 41/71 [00:30<00:23,  1.29it/s] 59% 42/71 [00:30<00:20,  1.41it/s] 61% 43/71 [00:31<00:21,  1.30it/s] 62% 44/71 [00:32<00:18,  1.44it/s] 63% 45/71 [00:33<00:19,  1.32it/s] 65% 46/71 [00:33<00:17,  1.45it/s] 66% 47/71 [00:34<00:18,  1.33it/s] 68% 48/71 [00:35<00:15,  1.45it/s] 69% 49/71 [00:36<00:16,  1.30it/s] 70% 50/71 [00:36<00:14,  1.42it/s] 72% 51/71 [00:37<00:15,  1.30it/s] 73% 52/71 [00:38<00:13,  1.42it/s] 75% 53/71 [00:39<00:13,  1.30it/s] 76% 54/71 [00:39<00:11,  1.43it/s] 77% 55/71 [00:40<00:12,  1.30it/s] 79% 56/71 [00:41<00:10,  1.42it/s] 80% 57/71 [00:42<00:10,  1.28it/s] 82% 58/71 [00:42<00:09,  1.42it/s] 83% 59/71 [00:43<00:09,  1.30it/s] 85% 60/71 [00:44<00:07,  1.44it/s] 86% 61/71 [00:44<00:07,  1.30it/s] 87% 62/71 [00:45<00:06,  1.43it/s] 89% 63/71 [00:46<00:06,  1.31it/s] 90% 64/71 [00:46<00:04,  1.43it/s] 92% 65/71 [00:47<00:04,  1.30it/s] 93% 66/71 [00:48<00:03,  1.43it/s] 94% 67/71 [00:49<00:03,  1.30it/s] 96% 68/71 [00:49<00:02,  1.44it/s] 97% 69/71 [00:50<00:01,  1.28it/s] 99% 70/71 [00:51<00:00,  1.41it/s]100% 71/71 [00:52<00:00,  1.45it/s]100% 71/71 [00:52<00:00,  1.36it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<00:37,  1.88it/s]  3% 2/71 [00:01<00:52,  1.32it/s]  4% 3/71 [00:01<00:44,  1.53it/s]  6% 4/71 [00:02<00:52,  1.29it/s]  7% 5/71 [00:03<00:45,  1.45it/s]  8% 6/71 [00:04<00:50,  1.28it/s] 10% 7/71 [00:04<00:45,  1.42it/s] 11% 8/71 [00:05<00:48,  1.30it/s] 13% 9/71 [00:06<00:43,  1.42it/s] 14% 10/71 [00:07<00:46,  1.31it/s] 15% 11/71 [00:07<00:41,  1.45it/s] 17% 12/71 [00:08<00:44,  1.33it/s] 18% 13/71 [00:09<00:39,  1.46it/s] 20% 14/71 [00:10<00:42,  1.33it/s] 21% 15/71 [00:10<00:38,  1.46it/s] 23% 16/71 [00:11<00:41,  1.32it/s] 24% 17/71 [00:12<00:37,  1.44it/s] 25% 18/71 [00:13<00:40,  1.31it/s] 27% 19/71 [00:13<00:36,  1.44it/s] 28% 20/71 [00:14<00:38,  1.32it/s] 30% 21/71 [00:15<00:34,  1.44it/s] 31% 22/71 [00:16<00:37,  1.32it/s] 32% 23/71 [00:16<00:33,  1.45it/s] 34% 24/71 [00:17<00:35,  1.33it/s] 35% 25/71 [00:17<00:31,  1.46it/s] 37% 26/71 [00:18<00:33,  1.33it/s] 38% 27/71 [00:19<00:30,  1.46it/s] 39% 28/71 [00:20<00:32,  1.32it/s] 41% 29/71 [00:20<00:29,  1.44it/s] 42% 30/71 [00:21<00:32,  1.28it/s] 44% 31/71 [00:22<00:28,  1.41it/s] 45% 32/71 [00:23<00:30,  1.28it/s] 46% 33/71 [00:23<00:26,  1.42it/s] 48% 34/71 [00:24<00:28,  1.28it/s] 49% 35/71 [00:25<00:25,  1.41it/s] 51% 36/71 [00:26<00:27,  1.27it/s] 52% 37/71 [00:26<00:24,  1.41it/s] 54% 38/71 [00:27<00:25,  1.29it/s] 55% 39/71 [00:28<00:22,  1.42it/s] 56% 40/71 [00:29<00:24,  1.29it/s] 58% 41/71 [00:29<00:21,  1.42it/s] 59% 42/71 [00:30<00:22,  1.31it/s] 61% 43/71 [00:31<00:19,  1.44it/s] 62% 44/71 [00:32<00:20,  1.31it/s] 63% 45/71 [00:32<00:18,  1.44it/s] 65% 46/71 [00:33<00:19,  1.31it/s] 66% 47/71 [00:34<00:16,  1.44it/s] 68% 48/71 [00:35<00:17,  1.30it/s] 69% 49/71 [00:35<00:15,  1.44it/s] 70% 50/71 [00:36<00:16,  1.31it/s] 72% 51/71 [00:37<00:13,  1.44it/s] 73% 52/71 [00:38<00:14,  1.29it/s] 75% 53/71 [00:38<00:12,  1.42it/s] 76% 54/71 [00:39<00:13,  1.29it/s] 77% 55/71 [00:40<00:11,  1.42it/s] 79% 56/71 [00:41<00:11,  1.30it/s] 80% 57/71 [00:41<00:09,  1.43it/s] 82% 58/71 [00:42<00:09,  1.32it/s] 83% 59/71 [00:42<00:08,  1.44it/s] 85% 60/71 [00:43<00:08,  1.31it/s] 86% 61/71 [00:44<00:06,  1.43it/s] 87% 62/71 [00:45<00:06,  1.31it/s] 89% 63/71 [00:45<00:05,  1.43it/s] 90% 64/71 [00:46<00:05,  1.29it/s] 92% 65/71 [00:47<00:04,  1.42it/s] 93% 66/71 [00:48<00:03,  1.30it/s] 94% 67/71 [00:48<00:02,  1.43it/s] 96% 68/71 [00:49<00:02,  1.30it/s] 97% 69/71 [00:50<00:01,  1.43it/s] 99% 70/71 [00:51<00:00,  1.31it/s]100% 71/71 [00:51<00:00,  1.63it/s]100% 71/71 [00:51<00:00,  1.38it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<01:05,  1.07it/s]  3% 2/71 [00:01<00:49,  1.39it/s]  4% 3/71 [00:02<00:55,  1.22it/s]  6% 4/71 [00:02<00:47,  1.40it/s]  7% 5/71 [00:03<00:51,  1.27it/s]  8% 6/71 [00:04<00:45,  1.43it/s] 10% 7/71 [00:05<00:49,  1.30it/s] 11% 8/71 [00:05<00:43,  1.44it/s] 13% 9/71 [00:06<00:47,  1.31it/s] 14% 10/71 [00:07<00:42,  1.44it/s] 15% 11/71 [00:08<00:46,  1.30it/s] 17% 12/71 [00:08<00:41,  1.43it/s] 18% 13/71 [00:09<00:45,  1.28it/s] 20% 14/71 [00:10<00:40,  1.41it/s] 21% 15/71 [00:11<00:44,  1.27it/s] 23% 16/71 [00:11<00:39,  1.40it/s] 24% 17/71 [00:12<00:42,  1.28it/s] 25% 18/71 [00:13<00:37,  1.41it/s] 27% 19/71 [00:14<00:40,  1.29it/s] 28% 20/71 [00:14<00:36,  1.40it/s] 30% 21/71 [00:15<00:38,  1.29it/s] 31% 22/71 [00:16<00:34,  1.41it/s] 32% 23/71 [00:17<00:37,  1.30it/s] 34% 24/71 [00:17<00:33,  1.42it/s] 35% 25/71 [00:18<00:35,  1.30it/s] 37% 26/71 [00:19<00:31,  1.43it/s] 38% 27/71 [00:20<00:33,  1.30it/s] 39% 28/71 [00:20<00:30,  1.42it/s] 41% 29/71 [00:21<00:32,  1.30it/s] 42% 30/71 [00:22<00:28,  1.43it/s] 44% 31/71 [00:23<00:30,  1.29it/s] 45% 32/71 [00:23<00:27,  1.43it/s] 46% 33/71 [00:24<00:29,  1.29it/s] 48% 34/71 [00:25<00:26,  1.42it/s] 49% 35/71 [00:26<00:27,  1.29it/s] 51% 36/71 [00:26<00:24,  1.41it/s] 52% 37/71 [00:27<00:26,  1.28it/s] 54% 38/71 [00:28<00:23,  1.42it/s] 55% 39/71 [00:29<00:24,  1.28it/s] 56% 40/71 [00:29<00:21,  1.41it/s] 58% 41/71 [00:30<00:23,  1.29it/s] 59% 42/71 [00:31<00:20,  1.41it/s] 61% 43/71 [00:32<00:21,  1.28it/s] 62% 44/71 [00:32<00:19,  1.41it/s] 63% 45/71 [00:33<00:19,  1.30it/s] 65% 46/71 [00:34<00:17,  1.43it/s] 66% 47/71 [00:34<00:18,  1.30it/s] 68% 48/71 [00:35<00:16,  1.42it/s] 69% 49/71 [00:36<00:17,  1.28it/s] 70% 50/71 [00:37<00:14,  1.41it/s] 72% 51/71 [00:37<00:15,  1.29it/s] 73% 52/71 [00:38<00:13,  1.41it/s] 75% 53/71 [00:39<00:13,  1.30it/s] 76% 54/71 [00:39<00:11,  1.42it/s] 77% 55/71 [00:40<00:12,  1.30it/s] 79% 56/71 [00:41<00:10,  1.43it/s] 80% 57/71 [00:42<00:10,  1.31it/s] 82% 58/71 [00:42<00:09,  1.44it/s] 83% 59/71 [00:43<00:09,  1.32it/s] 85% 60/71 [00:44<00:07,  1.43it/s] 86% 61/71 [00:45<00:07,  1.30it/s] 87% 62/71 [00:45<00:06,  1.43it/s] 89% 63/71 [00:46<00:06,  1.30it/s] 90% 64/71 [00:47<00:04,  1.42it/s] 92% 65/71 [00:48<00:04,  1.30it/s] 93% 66/71 [00:48<00:03,  1.42it/s] 94% 67/71 [00:49<00:03,  1.31it/s] 96% 68/71 [00:50<00:02,  1.44it/s] 97% 69/71 [00:51<00:01,  1.32it/s] 99% 70/71 [00:51<00:00,  1.45it/s]100% 71/71 [00:52<00:00,  1.48it/s]100% 71/71 [00:52<00:00,  1.36it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<00:36,  1.90it/s]  3% 2/71 [00:01<00:52,  1.32it/s]  4% 3/71 [00:01<00:45,  1.51it/s]  6% 4/71 [00:02<00:50,  1.33it/s]  7% 5/71 [00:03<00:45,  1.47it/s]  8% 6/71 [00:04<00:50,  1.30it/s] 10% 7/71 [00:04<00:44,  1.45it/s] 11% 8/71 [00:05<00:47,  1.31it/s] 13% 9/71 [00:06<00:42,  1.44it/s] 14% 10/71 [00:07<00:46,  1.31it/s] 15% 11/71 [00:07<00:41,  1.43it/s] 17% 12/71 [00:08<00:45,  1.30it/s] 18% 13/71 [00:09<00:40,  1.43it/s] 20% 14/71 [00:10<00:43,  1.30it/s] 21% 15/71 [00:10<00:39,  1.42it/s] 23% 16/71 [00:11<00:42,  1.31it/s] 24% 17/71 [00:12<00:37,  1.44it/s] 25% 18/71 [00:13<00:40,  1.31it/s] 27% 19/71 [00:13<00:36,  1.43it/s] 28% 20/71 [00:14<00:38,  1.31it/s] 30% 21/71 [00:15<00:34,  1.44it/s] 31% 22/71 [00:16<00:37,  1.31it/s] 32% 23/71 [00:16<00:33,  1.44it/s] 34% 24/71 [00:17<00:36,  1.30it/s] 35% 25/71 [00:18<00:32,  1.42it/s] 37% 26/71 [00:19<00:34,  1.30it/s] 38% 27/71 [00:19<00:30,  1.42it/s] 39% 28/71 [00:20<00:33,  1.29it/s] 41% 29/71 [00:21<00:29,  1.41it/s] 42% 30/71 [00:22<00:32,  1.26it/s] 44% 31/71 [00:22<00:28,  1.39it/s] 45% 32/71 [00:23<00:30,  1.28it/s] 46% 33/71 [00:24<00:27,  1.40it/s] 48% 34/71 [00:24<00:28,  1.30it/s] 49% 35/71 [00:25<00:25,  1.42it/s] 51% 36/71 [00:26<00:26,  1.30it/s] 52% 37/71 [00:27<00:23,  1.43it/s] 54% 38/71 [00:27<00:25,  1.30it/s] 55% 39/71 [00:28<00:22,  1.43it/s] 56% 40/71 [00:29<00:23,  1.30it/s] 58% 41/71 [00:29<00:21,  1.42it/s] 59% 42/71 [00:30<00:21,  1.32it/s] 61% 43/71 [00:31<00:19,  1.44it/s] 62% 44/71 [00:32<00:20,  1.30it/s] 63% 45/71 [00:32<00:18,  1.43it/s] 65% 46/71 [00:33<00:19,  1.31it/s] 66% 47/71 [00:34<00:16,  1.44it/s] 68% 48/71 [00:35<00:17,  1.31it/s] 69% 49/71 [00:35<00:15,  1.43it/s] 70% 50/71 [00:36<00:16,  1.30it/s] 72% 51/71 [00:37<00:14,  1.42it/s] 73% 52/71 [00:38<00:14,  1.27it/s] 75% 53/71 [00:38<00:12,  1.40it/s] 76% 54/71 [00:39<00:13,  1.30it/s] 77% 55/71 [00:40<00:11,  1.42it/s] 79% 56/71 [00:41<00:11,  1.30it/s] 80% 57/71 [00:41<00:09,  1.42it/s] 82% 58/71 [00:42<00:10,  1.30it/s] 83% 59/71 [00:43<00:08,  1.43it/s] 85% 60/71 [00:44<00:08,  1.30it/s] 86% 61/71 [00:44<00:07,  1.43it/s] 87% 62/71 [00:45<00:06,  1.31it/s] 89% 63/71 [00:46<00:05,  1.43it/s] 90% 64/71 [00:47<00:05,  1.31it/s] 92% 65/71 [00:47<00:04,  1.42it/s] 93% 66/71 [00:48<00:03,  1.30it/s] 94% 67/71 [00:49<00:02,  1.43it/s] 96% 68/71 [00:49<00:02,  1.32it/s] 97% 69/71 [00:50<00:01,  1.45it/s] 99% 70/71 [00:51<00:00,  1.32it/s]100% 71/71 [00:51<00:00,  1.64it/s]100% 71/71 [00:51<00:00,  1.37it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<01:04,  1.09it/s]  3% 2/71 [00:01<00:47,  1.45it/s]  4% 3/71 [00:02<00:54,  1.26it/s]  6% 4/71 [00:02<00:46,  1.45it/s]  7% 5/71 [00:03<00:51,  1.28it/s]  8% 6/71 [00:04<00:45,  1.43it/s] 10% 7/71 [00:05<00:49,  1.30it/s] 11% 8/71 [00:05<00:44,  1.43it/s] 13% 9/71 [00:06<00:47,  1.30it/s] 14% 10/71 [00:07<00:42,  1.44it/s] 15% 11/71 [00:08<00:45,  1.31it/s] 17% 12/71 [00:08<00:41,  1.43it/s] 18% 13/71 [00:09<00:44,  1.31it/s] 20% 14/71 [00:10<00:39,  1.43it/s] 21% 15/71 [00:11<00:42,  1.31it/s] 23% 16/71 [00:11<00:38,  1.42it/s] 24% 17/71 [00:12<00:41,  1.30it/s] 25% 18/71 [00:13<00:36,  1.44it/s] 27% 19/71 [00:14<00:39,  1.30it/s] 28% 20/71 [00:14<00:35,  1.43it/s] 30% 21/71 [00:15<00:38,  1.31it/s] 31% 22/71 [00:16<00:34,  1.44it/s] 32% 23/71 [00:16<00:36,  1.32it/s] 34% 24/71 [00:17<00:32,  1.46it/s] 35% 25/71 [00:18<00:35,  1.31it/s] 37% 26/71 [00:18<00:31,  1.43it/s] 38% 27/71 [00:19<00:33,  1.30it/s] 39% 28/71 [00:20<00:30,  1.43it/s] 41% 29/71 [00:21<00:32,  1.30it/s] 42% 30/71 [00:21<00:28,  1.42it/s] 44% 31/71 [00:22<00:30,  1.30it/s] 45% 32/71 [00:23<00:27,  1.42it/s] 46% 33/71 [00:24<00:29,  1.30it/s] 48% 34/71 [00:24<00:25,  1.43it/s] 49% 35/71 [00:25<00:27,  1.30it/s] 51% 36/71 [00:26<00:24,  1.42it/s] 52% 37/71 [00:27<00:26,  1.31it/s] 54% 38/71 [00:27<00:23,  1.42it/s] 55% 39/71 [00:28<00:24,  1.29it/s] 56% 40/71 [00:29<00:22,  1.40it/s] 58% 41/71 [00:30<00:23,  1.30it/s] 59% 42/71 [00:30<00:20,  1.43it/s] 61% 43/71 [00:31<00:21,  1.32it/s] 62% 44/71 [00:32<00:18,  1.44it/s] 63% 45/71 [00:33<00:19,  1.32it/s] 65% 46/71 [00:33<00:17,  1.44it/s] 66% 47/71 [00:34<00:18,  1.32it/s] 68% 48/71 [00:35<00:16,  1.42it/s] 69% 49/71 [00:36<00:17,  1.28it/s] 70% 50/71 [00:36<00:14,  1.42it/s] 72% 51/71 [00:37<00:15,  1.30it/s] 73% 52/71 [00:38<00:13,  1.42it/s] 75% 53/71 [00:39<00:13,  1.30it/s] 76% 54/71 [00:39<00:12,  1.41it/s] 77% 55/71 [00:40<00:12,  1.29it/s] 79% 56/71 [00:41<00:10,  1.41it/s] 80% 57/71 [00:42<00:10,  1.30it/s] 82% 58/71 [00:42<00:09,  1.42it/s] 83% 59/71 [00:43<00:09,  1.30it/s] 85% 60/71 [00:44<00:07,  1.42it/s] 86% 61/71 [00:45<00:07,  1.28it/s] 87% 62/71 [00:45<00:06,  1.42it/s] 89% 63/71 [00:46<00:06,  1.29it/s] 90% 64/71 [00:46<00:04,  1.43it/s] 92% 65/71 [00:47<00:04,  1.30it/s] 93% 66/71 [00:48<00:03,  1.42it/s] 94% 67/71 [00:49<00:03,  1.30it/s] 96% 68/71 [00:49<00:02,  1.42it/s] 97% 69/71 [00:50<00:01,  1.30it/s] 99% 70/71 [00:51<00:00,  1.42it/s]100% 71/71 [00:52<00:00,  1.46it/s]100% 71/71 [00:52<00:00,  1.36it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<00:37,  1.87it/s]  3% 2/71 [00:01<00:53,  1.28it/s]  4% 3/71 [00:02<00:45,  1.49it/s]  6% 4/71 [00:02<00:51,  1.30it/s]  7% 5/71 [00:03<00:45,  1.45it/s]  8% 6/71 [00:04<00:49,  1.31it/s] 10% 7/71 [00:04<00:44,  1.44it/s] 11% 8/71 [00:05<00:48,  1.31it/s] 13% 9/71 [00:06<00:43,  1.43it/s] 14% 10/71 [00:07<00:47,  1.30it/s] 15% 11/71 [00:07<00:42,  1.43it/s] 17% 12/71 [00:08<00:45,  1.29it/s] 18% 13/71 [00:09<00:41,  1.41it/s] 20% 14/71 [00:10<00:43,  1.31it/s] 21% 15/71 [00:10<00:38,  1.44it/s] 23% 16/71 [00:11<00:41,  1.32it/s] 24% 17/71 [00:12<00:37,  1.44it/s] 25% 18/71 [00:13<00:40,  1.32it/s] 27% 19/71 [00:13<00:35,  1.46it/s] 28% 20/71 [00:14<00:39,  1.30it/s] 30% 21/71 [00:15<00:35,  1.42it/s] 31% 22/71 [00:16<00:37,  1.31it/s] 32% 23/71 [00:16<00:33,  1.44it/s] 34% 24/71 [00:17<00:35,  1.31it/s] 35% 25/71 [00:18<00:32,  1.43it/s] 37% 26/71 [00:19<00:34,  1.30it/s] 38% 27/71 [00:19<00:30,  1.42it/s] 39% 28/71 [00:20<00:33,  1.28it/s] 41% 29/71 [00:21<00:29,  1.40it/s] 42% 30/71 [00:22<00:31,  1.30it/s] 44% 31/71 [00:22<00:28,  1.42it/s] 45% 32/71 [00:23<00:30,  1.30it/s] 46% 33/71 [00:24<00:26,  1.43it/s] 48% 34/71 [00:24<00:28,  1.30it/s] 49% 35/71 [00:25<00:25,  1.42it/s] 51% 36/71 [00:26<00:27,  1.28it/s] 52% 37/71 [00:27<00:24,  1.40it/s] 54% 38/71 [00:27<00:25,  1.28it/s] 55% 39/71 [00:28<00:22,  1.41it/s] 56% 40/71 [00:29<00:24,  1.29it/s] 58% 41/71 [00:30<00:21,  1.42it/s] 59% 42/71 [00:30<00:22,  1.30it/s] 61% 43/71 [00:31<00:19,  1.43it/s] 62% 44/71 [00:32<00:20,  1.30it/s] 63% 45/71 [00:32<00:18,  1.43it/s] 65% 46/71 [00:33<00:19,  1.30it/s] 66% 47/71 [00:34<00:16,  1.42it/s] 68% 48/71 [00:35<00:17,  1.29it/s] 69% 49/71 [00:35<00:15,  1.41it/s] 70% 50/71 [00:36<00:16,  1.28it/s] 72% 51/71 [00:37<00:14,  1.42it/s] 73% 52/71 [00:38<00:14,  1.30it/s] 75% 53/71 [00:38<00:12,  1.41it/s] 76% 54/71 [00:39<00:13,  1.30it/s] 77% 55/71 [00:40<00:11,  1.43it/s] 79% 56/71 [00:41<00:11,  1.31it/s] 80% 57/71 [00:41<00:09,  1.44it/s] 82% 58/71 [00:42<00:09,  1.30it/s] 83% 59/71 [00:43<00:08,  1.43it/s] 85% 60/71 [00:44<00:08,  1.31it/s] 86% 61/71 [00:44<00:06,  1.44it/s] 87% 62/71 [00:45<00:06,  1.31it/s] 89% 63/71 [00:46<00:05,  1.44it/s] 90% 64/71 [00:47<00:05,  1.28it/s] 92% 65/71 [00:47<00:04,  1.41it/s] 93% 66/71 [00:48<00:03,  1.29it/s] 94% 67/71 [00:49<00:02,  1.41it/s] 96% 68/71 [00:50<00:02,  1.29it/s] 97% 69/71 [00:50<00:01,  1.42it/s] 99% 70/71 [00:51<00:00,  1.30it/s]100% 71/71 [00:51<00:00,  1.64it/s]100% 71/71 [00:51<00:00,  1.37it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<01:03,  1.11it/s]  3% 2/71 [00:01<00:47,  1.45it/s]  4% 3/71 [00:02<00:53,  1.27it/s]  6% 4/71 [00:02<00:46,  1.45it/s]  7% 5/71 [00:03<00:50,  1.31it/s]  8% 6/71 [00:04<00:44,  1.46it/s] 10% 7/71 [00:05<00:48,  1.32it/s] 11% 8/71 [00:05<00:43,  1.46it/s] 13% 9/71 [00:06<00:47,  1.32it/s] 14% 10/71 [00:07<00:42,  1.43it/s] 15% 11/71 [00:08<00:45,  1.32it/s] 17% 12/71 [00:08<00:40,  1.45it/s] 18% 13/71 [00:09<00:43,  1.33it/s] 20% 14/71 [00:10<00:39,  1.46it/s] 21% 15/71 [00:11<00:42,  1.32it/s] 23% 16/71 [00:11<00:37,  1.45it/s] 24% 17/71 [00:12<00:42,  1.28it/s] 25% 18/71 [00:13<00:37,  1.42it/s] 27% 19/71 [00:13<00:39,  1.30it/s] 28% 20/71 [00:14<00:35,  1.43it/s] 30% 21/71 [00:15<00:38,  1.31it/s] 31% 22/71 [00:15<00:34,  1.44it/s] 32% 23/71 [00:16<00:36,  1.30it/s] 34% 24/71 [00:17<00:32,  1.43it/s] 35% 25/71 [00:18<00:35,  1.29it/s] 37% 26/71 [00:18<00:31,  1.42it/s] 38% 27/71 [00:19<00:34,  1.28it/s] 39% 28/71 [00:20<00:30,  1.41it/s] 41% 29/71 [00:21<00:32,  1.28it/s] 42% 30/71 [00:21<00:29,  1.41it/s] 44% 31/71 [00:22<00:31,  1.28it/s] 45% 32/71 [00:23<00:27,  1.41it/s] 46% 33/71 [00:24<00:29,  1.29it/s] 48% 34/71 [00:24<00:26,  1.41it/s] 49% 35/71 [00:25<00:27,  1.30it/s] 51% 36/71 [00:26<00:24,  1.43it/s] 52% 37/71 [00:27<00:26,  1.28it/s] 54% 38/71 [00:27<00:23,  1.41it/s] 55% 39/71 [00:28<00:24,  1.30it/s] 56% 40/71 [00:29<00:21,  1.42it/s] 58% 41/71 [00:30<00:23,  1.30it/s] 59% 42/71 [00:30<00:20,  1.42it/s] 61% 43/71 [00:31<00:21,  1.31it/s] 62% 44/71 [00:32<00:18,  1.43it/s] 63% 45/71 [00:33<00:19,  1.30it/s] 65% 46/71 [00:33<00:17,  1.42it/s] 66% 47/71 [00:34<00:18,  1.31it/s] 68% 48/71 [00:35<00:16,  1.44it/s] 69% 49/71 [00:36<00:16,  1.31it/s] 70% 50/71 [00:36<00:14,  1.43it/s] 72% 51/71 [00:37<00:15,  1.31it/s] 73% 52/71 [00:38<00:13,  1.43it/s] 75% 53/71 [00:39<00:13,  1.31it/s] 76% 54/71 [00:39<00:11,  1.42it/s] 77% 55/71 [00:40<00:12,  1.30it/s] 79% 56/71 [00:41<00:10,  1.42it/s] 80% 57/71 [00:42<00:10,  1.28it/s] 82% 58/71 [00:42<00:09,  1.40it/s] 83% 59/71 [00:43<00:09,  1.29it/s] 85% 60/71 [00:44<00:07,  1.43it/s] 86% 61/71 [00:44<00:07,  1.31it/s] 87% 62/71 [00:45<00:06,  1.45it/s] 89% 63/71 [00:46<00:06,  1.32it/s] 90% 64/71 [00:46<00:04,  1.44it/s] 92% 65/71 [00:47<00:04,  1.31it/s] 93% 66/71 [00:48<00:03,  1.43it/s] 94% 67/71 [00:49<00:03,  1.30it/s] 96% 68/71 [00:49<00:02,  1.42it/s] 97% 69/71 [00:50<00:01,  1.30it/s] 99% 70/71 [00:51<00:00,  1.42it/s]100% 71/71 [00:52<00:00,  1.45it/s]100% 71/71 [00:52<00:00,  1.36it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<00:36,  1.93it/s]  3% 2/71 [00:01<00:51,  1.33it/s]  4% 3/71 [00:01<00:44,  1.52it/s]  6% 4/71 [00:02<00:51,  1.30it/s]  7% 5/71 [00:03<00:45,  1.46it/s]  8% 6/71 [00:04<00:49,  1.32it/s] 10% 7/71 [00:04<00:43,  1.47it/s] 11% 8/71 [00:05<00:47,  1.33it/s] 13% 9/71 [00:06<00:42,  1.47it/s] 14% 10/71 [00:07<00:46,  1.31it/s] 15% 11/71 [00:07<00:41,  1.45it/s] 17% 12/71 [00:08<00:44,  1.32it/s] 18% 13/71 [00:09<00:39,  1.45it/s] 20% 14/71 [00:10<00:43,  1.32it/s] 21% 15/71 [00:10<00:38,  1.44it/s] 23% 16/71 [00:11<00:42,  1.30it/s] 24% 17/71 [00:12<00:37,  1.43it/s] 25% 18/71 [00:13<00:40,  1.30it/s] 27% 19/71 [00:13<00:36,  1.42it/s] 28% 20/71 [00:14<00:39,  1.30it/s] 30% 21/71 [00:15<00:34,  1.43it/s] 31% 22/71 [00:16<00:37,  1.30it/s] 32% 23/71 [00:16<00:33,  1.43it/s] 34% 24/71 [00:17<00:36,  1.29it/s] 35% 25/71 [00:18<00:32,  1.41it/s] 37% 26/71 [00:19<00:35,  1.28it/s] 38% 27/71 [00:19<00:31,  1.41it/s] 39% 28/71 [00:20<00:33,  1.30it/s] 41% 29/71 [00:21<00:29,  1.42it/s] 42% 30/71 [00:21<00:31,  1.29it/s] 44% 31/71 [00:22<00:28,  1.42it/s] 45% 32/71 [00:23<00:30,  1.28it/s] 46% 33/71 [00:24<00:26,  1.41it/s] 48% 34/71 [00:24<00:28,  1.28it/s] 49% 35/71 [00:25<00:25,  1.40it/s] 51% 36/71 [00:26<00:27,  1.29it/s] 52% 37/71 [00:26<00:23,  1.42it/s] 54% 38/71 [00:27<00:25,  1.30it/s] 55% 39/71 [00:28<00:22,  1.42it/s] 56% 40/71 [00:29<00:23,  1.30it/s] 58% 41/71 [00:29<00:21,  1.42it/s] 59% 42/71 [00:30<00:22,  1.30it/s] 61% 43/71 [00:31<00:19,  1.42it/s] 62% 44/71 [00:32<00:20,  1.31it/s] 63% 45/71 [00:32<00:18,  1.44it/s] 65% 46/71 [00:33<00:19,  1.29it/s] 66% 47/71 [00:34<00:16,  1.42it/s] 68% 48/71 [00:35<00:17,  1.29it/s] 69% 49/71 [00:35<00:15,  1.41it/s] 70% 50/71 [00:36<00:16,  1.29it/s] 72% 51/71 [00:37<00:14,  1.41it/s] 73% 52/71 [00:38<00:14,  1.30it/s] 75% 53/71 [00:38<00:12,  1.42it/s] 76% 54/71 [00:39<00:13,  1.28it/s] 77% 55/71 [00:40<00:11,  1.40it/s] 79% 56/71 [00:41<00:11,  1.27it/s] 80% 57/71 [00:41<00:10,  1.40it/s] 82% 58/71 [00:42<00:10,  1.29it/s] 83% 59/71 [00:43<00:08,  1.41it/s] 85% 60/71 [00:44<00:08,  1.29it/s] 86% 61/71 [00:44<00:07,  1.42it/s] 87% 62/71 [00:45<00:06,  1.29it/s] 89% 63/71 [00:46<00:05,  1.42it/s] 90% 64/71 [00:47<00:05,  1.30it/s] 92% 65/71 [00:47<00:04,  1.41it/s] 93% 66/71 [00:48<00:03,  1.28it/s] 94% 67/71 [00:49<00:02,  1.40it/s] 96% 68/71 [00:50<00:02,  1.27it/s] 97% 69/71 [00:50<00:01,  1.41it/s] 99% 70/71 [00:51<00:00,  1.30it/s]100% 71/71 [00:51<00:00,  1.64it/s]100% 71/71 [00:51<00:00,  1.37it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<01:05,  1.08it/s]  3% 2/71 [00:01<00:48,  1.43it/s]  4% 3/71 [00:02<00:54,  1.26it/s]  6% 4/71 [00:02<00:46,  1.44it/s]  7% 5/71 [00:03<00:50,  1.30it/s]  8% 6/71 [00:04<00:44,  1.45it/s] 10% 7/71 [00:05<00:49,  1.30it/s] 11% 8/71 [00:05<00:43,  1.44it/s] 13% 9/71 [00:06<00:46,  1.32it/s] 14% 10/71 [00:07<00:41,  1.46it/s] 15% 11/71 [00:08<00:45,  1.32it/s] 17% 12/71 [00:08<00:40,  1.44it/s] 18% 13/71 [00:09<00:43,  1.32it/s] 20% 14/71 [00:10<00:39,  1.46it/s] 21% 15/71 [00:11<00:42,  1.31it/s] 23% 16/71 [00:11<00:38,  1.44it/s] 24% 17/71 [00:12<00:40,  1.32it/s] 25% 18/71 [00:13<00:36,  1.45it/s] 27% 19/71 [00:13<00:39,  1.31it/s] 28% 20/71 [00:14<00:35,  1.45it/s] 30% 21/71 [00:15<00:38,  1.31it/s] 31% 22/71 [00:15<00:34,  1.43it/s] 32% 23/71 [00:16<00:36,  1.30it/s] 34% 24/71 [00:17<00:32,  1.43it/s] 35% 25/71 [00:18<00:35,  1.30it/s] 37% 26/71 [00:18<00:31,  1.43it/s] 38% 27/71 [00:19<00:33,  1.31it/s] 39% 28/71 [00:20<00:30,  1.43it/s] 41% 29/71 [00:21<00:32,  1.31it/s] 42% 30/71 [00:21<00:28,  1.43it/s] 44% 31/71 [00:22<00:30,  1.30it/s] 45% 32/71 [00:23<00:27,  1.43it/s] 46% 33/71 [00:24<00:29,  1.30it/s] 48% 34/71 [00:24<00:26,  1.42it/s] 49% 35/71 [00:25<00:27,  1.30it/s] 51% 36/71 [00:26<00:24,  1.43it/s] 52% 37/71 [00:27<00:26,  1.30it/s] 54% 38/71 [00:27<00:23,  1.42it/s] 55% 39/71 [00:28<00:24,  1.30it/s] 56% 40/71 [00:29<00:21,  1.44it/s] 58% 41/71 [00:30<00:22,  1.31it/s] 59% 42/71 [00:30<00:20,  1.43it/s] 61% 43/71 [00:31<00:21,  1.31it/s] 62% 44/71 [00:32<00:18,  1.43it/s] 63% 45/71 [00:33<00:20,  1.30it/s] 65% 46/71 [00:33<00:17,  1.42it/s] 66% 47/71 [00:34<00:18,  1.28it/s] 68% 48/71 [00:35<00:16,  1.41it/s] 69% 49/71 [00:36<00:17,  1.28it/s] 70% 50/71 [00:36<00:14,  1.41it/s] 72% 51/71 [00:37<00:15,  1.29it/s] 73% 52/71 [00:38<00:13,  1.42it/s] 75% 53/71 [00:38<00:13,  1.30it/s] 76% 54/71 [00:39<00:11,  1.43it/s] 77% 55/71 [00:40<00:12,  1.27it/s] 79% 56/71 [00:41<00:10,  1.41it/s] 80% 57/71 [00:41<00:10,  1.28it/s] 82% 58/71 [00:42<00:09,  1.42it/s] 83% 59/71 [00:43<00:09,  1.29it/s] 85% 60/71 [00:44<00:07,  1.41it/s] 86% 61/71 [00:44<00:07,  1.30it/s] 87% 62/71 [00:45<00:06,  1.42it/s] 89% 63/71 [00:46<00:06,  1.28it/s] 90% 64/71 [00:46<00:04,  1.41it/s] 92% 65/71 [00:47<00:04,  1.29it/s] 93% 66/71 [00:48<00:03,  1.41it/s] 94% 67/71 [00:49<00:03,  1.29it/s] 96% 68/71 [00:49<00:02,  1.42it/s] 97% 69/71 [00:50<00:01,  1.30it/s] 99% 70/71 [00:51<00:00,  1.43it/s]100% 71/71 [00:52<00:00,  1.45it/s]100% 71/71 [00:52<00:00,  1.36it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<00:39,  1.77it/s]  3% 2/71 [00:01<00:53,  1.30it/s]  4% 3/71 [00:02<00:45,  1.50it/s]  6% 4/71 [00:02<00:51,  1.30it/s]  7% 5/71 [00:03<00:45,  1.45it/s]  8% 6/71 [00:04<00:49,  1.31it/s] 10% 7/71 [00:04<00:44,  1.43it/s] 11% 8/71 [00:05<00:48,  1.29it/s] 13% 9/71 [00:06<00:43,  1.42it/s] 14% 10/71 [00:07<00:47,  1.29it/s] 15% 11/71 [00:07<00:42,  1.41it/s] 17% 12/71 [00:08<00:45,  1.30it/s] 18% 13/71 [00:09<00:40,  1.42it/s] 20% 14/71 [00:10<00:43,  1.30it/s] 21% 15/71 [00:10<00:39,  1.42it/s] 23% 16/71 [00:11<00:42,  1.28it/s] 24% 17/71 [00:12<00:38,  1.41it/s] 25% 18/71 [00:13<00:40,  1.30it/s] 27% 19/71 [00:13<00:36,  1.41it/s] 28% 20/71 [00:14<00:39,  1.30it/s] 30% 21/71 [00:15<00:34,  1.43it/s] 31% 22/71 [00:16<00:37,  1.30it/s] 32% 23/71 [00:16<00:33,  1.43it/s] 34% 24/71 [00:17<00:35,  1.31it/s] 35% 25/71 [00:18<00:32,  1.44it/s] 37% 26/71 [00:19<00:34,  1.31it/s] 38% 27/71 [00:19<00:30,  1.42it/s] 39% 28/71 [00:20<00:32,  1.30it/s] 41% 29/71 [00:21<00:29,  1.43it/s] 42% 30/71 [00:22<00:31,  1.30it/s] 44% 31/71 [00:22<00:28,  1.42it/s] 45% 32/71 [00:23<00:29,  1.31it/s] 46% 33/71 [00:24<00:26,  1.44it/s] 48% 34/71 [00:25<00:28,  1.31it/s] 49% 35/71 [00:25<00:24,  1.44it/s] 51% 36/71 [00:26<00:26,  1.30it/s] 52% 37/71 [00:27<00:23,  1.43it/s] 54% 38/71 [00:27<00:25,  1.31it/s] 55% 39/71 [00:28<00:22,  1.43it/s] 56% 40/71 [00:29<00:23,  1.30it/s] 58% 41/71 [00:29<00:20,  1.43it/s] 59% 42/71 [00:30<00:22,  1.32it/s] 61% 43/71 [00:31<00:19,  1.44it/s] 62% 44/71 [00:32<00:20,  1.30it/s] 63% 45/71 [00:32<00:18,  1.43it/s] 65% 46/71 [00:33<00:19,  1.28it/s] 66% 47/71 [00:34<00:16,  1.43it/s] 68% 48/71 [00:35<00:17,  1.31it/s] 69% 49/71 [00:35<00:15,  1.44it/s] 70% 50/71 [00:36<00:16,  1.29it/s] 72% 51/71 [00:37<00:14,  1.42it/s] 73% 52/71 [00:38<00:14,  1.30it/s] 75% 53/71 [00:38<00:12,  1.43it/s] 76% 54/71 [00:39<00:13,  1.31it/s] 77% 55/71 [00:40<00:11,  1.43it/s] 79% 56/71 [00:41<00:11,  1.31it/s] 80% 57/71 [00:41<00:09,  1.44it/s] 82% 58/71 [00:42<00:09,  1.31it/s] 83% 59/71 [00:43<00:08,  1.43it/s] 85% 60/71 [00:44<00:08,  1.30it/s] 86% 61/71 [00:44<00:07,  1.42it/s] 87% 62/71 [00:45<00:06,  1.29it/s] 89% 63/71 [00:46<00:05,  1.43it/s] 90% 64/71 [00:46<00:05,  1.31it/s] 92% 65/71 [00:47<00:04,  1.44it/s] 93% 66/71 [00:48<00:03,  1.31it/s] 94% 67/71 [00:48<00:02,  1.43it/s] 96% 68/71 [00:49<00:02,  1.30it/s] 97% 69/71 [00:50<00:01,  1.44it/s] 99% 70/71 [00:51<00:00,  1.31it/s]100% 71/71 [00:51<00:00,  1.63it/s]100% 71/71 [00:51<00:00,  1.37it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<01:06,  1.06it/s]  3% 2/71 [00:01<00:48,  1.41it/s]  4% 3/71 [00:02<00:54,  1.25it/s]  6% 4/71 [00:02<00:46,  1.44it/s]  7% 5/71 [00:03<00:51,  1.29it/s]  8% 6/71 [00:04<00:45,  1.43it/s] 10% 7/71 [00:05<00:49,  1.30it/s] 11% 8/71 [00:05<00:44,  1.42it/s] 13% 9/71 [00:06<00:48,  1.29it/s] 14% 10/71 [00:07<00:43,  1.41it/s] 15% 11/71 [00:08<00:46,  1.29it/s] 17% 12/71 [00:08<00:41,  1.42it/s] 18% 13/71 [00:09<00:44,  1.30it/s] 20% 14/71 [00:10<00:39,  1.44it/s] 21% 15/71 [00:11<00:42,  1.32it/s] 23% 16/71 [00:11<00:37,  1.46it/s] 24% 17/71 [00:12<00:40,  1.32it/s] 25% 18/71 [00:13<00:36,  1.44it/s] 27% 19/71 [00:14<00:40,  1.29it/s] 28% 20/71 [00:14<00:36,  1.40it/s] 30% 21/71 [00:15<00:39,  1.27it/s] 31% 22/71 [00:16<00:35,  1.39it/s] 32% 23/71 [00:17<00:37,  1.27it/s] 34% 24/71 [00:17<00:33,  1.40it/s] 35% 25/71 [00:18<00:35,  1.29it/s] 37% 26/71 [00:19<00:32,  1.41it/s] 38% 27/71 [00:20<00:34,  1.29it/s] 39% 28/71 [00:20<00:30,  1.42it/s] 41% 29/71 [00:21<00:32,  1.30it/s] 42% 30/71 [00:22<00:28,  1.42it/s] 44% 31/71 [00:23<00:30,  1.29it/s] 45% 32/71 [00:23<00:27,  1.43it/s] 46% 33/71 [00:24<00:29,  1.29it/s] 48% 34/71 [00:25<00:25,  1.43it/s] 49% 35/71 [00:25<00:27,  1.31it/s] 51% 36/71 [00:26<00:24,  1.43it/s] 52% 37/71 [00:27<00:26,  1.29it/s] 54% 38/71 [00:28<00:23,  1.42it/s] 55% 39/71 [00:28<00:24,  1.31it/s] 56% 40/71 [00:29<00:21,  1.44it/s] 58% 41/71 [00:30<00:22,  1.31it/s] 59% 42/71 [00:30<00:20,  1.43it/s] 61% 43/71 [00:31<00:21,  1.30it/s] 62% 44/71 [00:32<00:18,  1.44it/s] 63% 45/71 [00:33<00:19,  1.31it/s] 65% 46/71 [00:33<00:17,  1.44it/s] 66% 47/71 [00:34<00:18,  1.32it/s] 68% 48/71 [00:35<00:15,  1.45it/s] 69% 49/71 [00:36<00:16,  1.32it/s] 70% 50/71 [00:36<00:14,  1.44it/s] 72% 51/71 [00:37<00:15,  1.29it/s] 73% 52/71 [00:38<00:13,  1.42it/s] 75% 53/71 [00:39<00:13,  1.30it/s] 76% 54/71 [00:39<00:11,  1.43it/s] 77% 55/71 [00:40<00:12,  1.30it/s] 79% 56/71 [00:41<00:10,  1.42it/s] 80% 57/71 [00:42<00:10,  1.29it/s] 82% 58/71 [00:42<00:09,  1.41it/s] 83% 59/71 [00:43<00:09,  1.29it/s] 85% 60/71 [00:44<00:07,  1.42it/s] 86% 61/71 [00:45<00:07,  1.30it/s] 87% 62/71 [00:45<00:06,  1.42it/s] 89% 63/71 [00:46<00:06,  1.30it/s] 90% 64/71 [00:47<00:04,  1.41it/s] 92% 65/71 [00:48<00:04,  1.28it/s] 93% 66/71 [00:48<00:03,  1.41it/s] 94% 67/71 [00:49<00:03,  1.28it/s] 96% 68/71 [00:50<00:02,  1.41it/s] 97% 69/71 [00:51<00:01,  1.29it/s] 99% 70/71 [00:51<00:00,  1.42it/s]100% 71/71 [00:52<00:00,  1.46it/s]100% 71/71 [00:52<00:00,  1.36it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<00:39,  1.79it/s]  3% 2/71 [00:01<00:52,  1.31it/s]  4% 3/71 [00:02<00:45,  1.50it/s]  6% 4/71 [00:02<00:52,  1.29it/s]  7% 5/71 [00:03<00:45,  1.45it/s]  8% 6/71 [00:04<00:50,  1.29it/s] 10% 7/71 [00:04<00:44,  1.43it/s] 11% 8/71 [00:05<00:48,  1.30it/s] 13% 9/71 [00:06<00:43,  1.43it/s] 14% 10/71 [00:07<00:47,  1.30it/s] 15% 11/71 [00:07<00:42,  1.42it/s] 17% 12/71 [00:08<00:45,  1.30it/s] 18% 13/71 [00:09<00:40,  1.42it/s] 20% 14/71 [00:10<00:43,  1.31it/s] 21% 15/71 [00:10<00:39,  1.43it/s] 23% 16/71 [00:11<00:42,  1.29it/s] 24% 17/71 [00:12<00:38,  1.42it/s] 25% 18/71 [00:13<00:41,  1.28it/s] 27% 19/71 [00:13<00:36,  1.41it/s] 28% 20/71 [00:14<00:39,  1.29it/s] 30% 21/71 [00:15<00:35,  1.41it/s] 31% 22/71 [00:16<00:37,  1.30it/s] 32% 23/71 [00:16<00:33,  1.43it/s] 34% 24/71 [00:17<00:36,  1.30it/s] 35% 25/71 [00:18<00:32,  1.43it/s] 37% 26/71 [00:19<00:34,  1.31it/s] 38% 27/71 [00:19<00:30,  1.43it/s] 39% 28/71 [00:20<00:32,  1.30it/s] 41% 29/71 [00:21<00:29,  1.43it/s] 42% 30/71 [00:22<00:31,  1.31it/s] 44% 31/71 [00:22<00:27,  1.43it/s] 45% 32/71 [00:23<00:29,  1.32it/s] 46% 33/71 [00:24<00:26,  1.44it/s] 48% 34/71 [00:24<00:28,  1.31it/s] 49% 35/71 [00:25<00:25,  1.42it/s] 51% 36/71 [00:26<00:26,  1.31it/s] 52% 37/71 [00:27<00:23,  1.42it/s] 54% 38/71 [00:27<00:25,  1.30it/s] 55% 39/71 [00:28<00:22,  1.42it/s] 56% 40/71 [00:29<00:23,  1.31it/s] 58% 41/71 [00:29<00:20,  1.44it/s] 59% 42/71 [00:30<00:22,  1.31it/s] 61% 43/71 [00:31<00:19,  1.43it/s] 62% 44/71 [00:32<00:20,  1.30it/s] 63% 45/71 [00:32<00:18,  1.42it/s] 65% 46/71 [00:33<00:19,  1.30it/s] 66% 47/71 [00:34<00:16,  1.42it/s] 68% 48/71 [00:35<00:17,  1.30it/s] 69% 49/71 [00:35<00:15,  1.43it/s] 70% 50/71 [00:36<00:16,  1.30it/s] 72% 51/71 [00:37<00:14,  1.42it/s] 73% 52/71 [00:38<00:14,  1.30it/s] 75% 53/71 [00:38<00:12,  1.42it/s] 76% 54/71 [00:39<00:13,  1.30it/s] 77% 55/71 [00:40<00:11,  1.43it/s] 79% 56/71 [00:41<00:11,  1.29it/s] 80% 57/71 [00:41<00:09,  1.42it/s] 82% 58/71 [00:42<00:09,  1.30it/s] 83% 59/71 [00:43<00:08,  1.43it/s] 85% 60/71 [00:44<00:08,  1.31it/s] 86% 61/71 [00:44<00:06,  1.44it/s] 87% 62/71 [00:45<00:06,  1.33it/s] 89% 63/71 [00:46<00:05,  1.45it/s] 90% 64/71 [00:46<00:05,  1.32it/s] 92% 65/71 [00:47<00:04,  1.45it/s] 93% 66/71 [00:48<00:03,  1.31it/s] 94% 67/71 [00:48<00:02,  1.44it/s] 96% 68/71 [00:49<00:02,  1.32it/s] 97% 69/71 [00:50<00:01,  1.44it/s] 99% 70/71 [00:51<00:00,  1.32it/s]100% 71/71 [00:51<00:00,  1.64it/s]100% 71/71 [00:51<00:00,  1.38it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<01:04,  1.08it/s]  3% 2/71 [00:01<00:48,  1.43it/s]  4% 3/71 [00:02<00:55,  1.23it/s]  6% 4/71 [00:02<00:47,  1.41it/s]  7% 5/71 [00:03<00:52,  1.25it/s]  8% 6/71 [00:04<00:46,  1.40it/s] 10% 7/71 [00:05<00:50,  1.28it/s] 11% 8/71 [00:05<00:44,  1.43it/s] 13% 9/71 [00:06<00:47,  1.30it/s] 14% 10/71 [00:07<00:42,  1.43it/s] 15% 11/71 [00:08<00:46,  1.30it/s] 17% 12/71 [00:08<00:41,  1.43it/s] 18% 13/71 [00:09<00:44,  1.30it/s] 20% 14/71 [00:10<00:39,  1.43it/s] 21% 15/71 [00:11<00:43,  1.30it/s] 23% 16/71 [00:11<00:38,  1.43it/s] 24% 17/71 [00:12<00:41,  1.31it/s] 25% 18/71 [00:13<00:36,  1.45it/s] 27% 19/71 [00:14<00:40,  1.29it/s] 28% 20/71 [00:14<00:35,  1.42it/s] 30% 21/71 [00:15<00:39,  1.28it/s] 31% 22/71 [00:16<00:34,  1.41it/s] 32% 23/71 [00:17<00:37,  1.29it/s] 34% 24/71 [00:17<00:33,  1.42it/s] 35% 25/71 [00:18<00:35,  1.29it/s] 37% 26/71 [00:19<00:31,  1.43it/s] 38% 27/71 [00:20<00:33,  1.30it/s] 39% 28/71 [00:20<00:29,  1.44it/s] 41% 29/71 [00:21<00:32,  1.30it/s] 42% 30/71 [00:22<00:28,  1.43it/s] 44% 31/71 [00:23<00:31,  1.28it/s] 45% 32/71 [00:23<00:27,  1.40it/s] 46% 33/71 [00:24<00:29,  1.29it/s] 48% 34/71 [00:25<00:26,  1.42it/s] 49% 35/71 [00:26<00:27,  1.29it/s] 51% 36/71 [00:26<00:24,  1.42it/s] 52% 37/71 [00:27<00:26,  1.30it/s] 54% 38/71 [00:28<00:22,  1.44it/s] 55% 39/71 [00:28<00:24,  1.30it/s] 56% 40/71 [00:29<00:21,  1.44it/s] 58% 41/71 [00:30<00:22,  1.32it/s] 59% 42/71 [00:30<00:19,  1.46it/s] 61% 43/71 [00:31<00:21,  1.33it/s] 62% 44/71 [00:32<00:18,  1.47it/s] 63% 45/71 [00:33<00:19,  1.31it/s] 65% 46/71 [00:33<00:17,  1.44it/s] 66% 47/71 [00:34<00:18,  1.30it/s] 68% 48/71 [00:35<00:16,  1.44it/s] 69% 49/71 [00:36<00:16,  1.29it/s] 70% 50/71 [00:36<00:14,  1.43it/s] 72% 51/71 [00:37<00:15,  1.31it/s] 73% 52/71 [00:38<00:13,  1.44it/s] 75% 53/71 [00:39<00:13,  1.30it/s] 76% 54/71 [00:39<00:11,  1.43it/s] 77% 55/71 [00:40<00:12,  1.28it/s] 79% 56/71 [00:41<00:10,  1.41it/s] 80% 57/71 [00:42<00:10,  1.30it/s] 82% 58/71 [00:42<00:09,  1.42it/s] 83% 59/71 [00:43<00:09,  1.30it/s] 85% 60/71 [00:44<00:07,  1.42it/s] 86% 61/71 [00:45<00:07,  1.31it/s] 87% 62/71 [00:45<00:06,  1.43it/s] 89% 63/71 [00:46<00:06,  1.31it/s] 90% 64/71 [00:47<00:04,  1.44it/s] 92% 65/71 [00:47<00:04,  1.31it/s] 93% 66/71 [00:48<00:03,  1.44it/s] 94% 67/71 [00:49<00:03,  1.32it/s] 96% 68/71 [00:49<00:02,  1.45it/s] 97% 69/71 [00:50<00:01,  1.32it/s] 99% 70/71 [00:51<00:00,  1.44it/s]100% 71/71 [00:52<00:00,  1.47it/s]100% 71/71 [00:52<00:00,  1.36it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<00:36,  1.90it/s]  3% 2/71 [00:01<00:52,  1.32it/s]  4% 3/71 [00:02<00:45,  1.50it/s]  6% 4/71 [00:02<00:51,  1.31it/s]  7% 5/71 [00:03<00:45,  1.46it/s]  8% 6/71 [00:04<00:50,  1.28it/s] 10% 7/71 [00:04<00:44,  1.43it/s] 11% 8/71 [00:05<00:48,  1.30it/s] 13% 9/71 [00:06<00:43,  1.43it/s] 14% 10/71 [00:07<00:46,  1.30it/s] 15% 11/71 [00:07<00:41,  1.43it/s] 17% 12/71 [00:08<00:45,  1.30it/s] 18% 13/71 [00:09<00:40,  1.43it/s] 20% 14/71 [00:10<00:43,  1.30it/s] 21% 15/71 [00:10<00:39,  1.42it/s] 23% 16/71 [00:11<00:42,  1.30it/s] 24% 17/71 [00:12<00:37,  1.44it/s] 25% 18/71 [00:13<00:40,  1.31it/s] 27% 19/71 [00:13<00:36,  1.44it/s] 28% 20/71 [00:14<00:39,  1.28it/s] 30% 21/71 [00:15<00:35,  1.42it/s] 31% 22/71 [00:16<00:37,  1.29it/s] 32% 23/71 [00:16<00:33,  1.43it/s] 34% 24/71 [00:17<00:36,  1.31it/s] 35% 25/71 [00:18<00:32,  1.44it/s] 37% 26/71 [00:19<00:34,  1.32it/s] 38% 27/71 [00:19<00:30,  1.45it/s] 39% 28/71 [00:20<00:32,  1.32it/s] 41% 29/71 [00:21<00:29,  1.44it/s] 42% 30/71 [00:22<00:32,  1.28it/s] 44% 31/71 [00:22<00:28,  1.40it/s] 45% 32/71 [00:23<00:30,  1.29it/s] 46% 33/71 [00:24<00:26,  1.41it/s] 48% 34/71 [00:25<00:28,  1.28it/s] 49% 35/71 [00:25<00:25,  1.40it/s] 51% 36/71 [00:26<00:27,  1.28it/s] 52% 37/71 [00:27<00:24,  1.41it/s] 54% 38/71 [00:28<00:26,  1.25it/s] 55% 39/71 [00:28<00:23,  1.39it/s] 56% 40/71 [00:29<00:24,  1.28it/s] 58% 41/71 [00:30<00:21,  1.41it/s] 59% 42/71 [00:30<00:22,  1.29it/s] 61% 43/71 [00:31<00:19,  1.43it/s] 62% 44/71 [00:32<00:20,  1.32it/s] 63% 45/71 [00:32<00:17,  1.45it/s] 65% 46/71 [00:33<00:18,  1.33it/s] 66% 47/71 [00:34<00:16,  1.46it/s] 68% 48/71 [00:35<00:17,  1.32it/s] 69% 49/71 [00:35<00:15,  1.44it/s] 70% 50/71 [00:36<00:16,  1.30it/s] 72% 51/71 [00:37<00:13,  1.44it/s] 73% 52/71 [00:38<00:14,  1.31it/s] 75% 53/71 [00:38<00:12,  1.44it/s] 76% 54/71 [00:39<00:13,  1.31it/s] 77% 55/71 [00:40<00:11,  1.43it/s] 79% 56/71 [00:41<00:11,  1.30it/s] 80% 57/71 [00:41<00:09,  1.43it/s] 82% 58/71 [00:42<00:09,  1.31it/s] 83% 59/71 [00:43<00:08,  1.44it/s] 85% 60/71 [00:44<00:08,  1.31it/s] 86% 61/71 [00:44<00:06,  1.44it/s] 87% 62/71 [00:45<00:07,  1.28it/s] 89% 63/71 [00:46<00:05,  1.42it/s] 90% 64/71 [00:47<00:05,  1.29it/s] 92% 65/71 [00:47<00:04,  1.43it/s] 93% 66/71 [00:48<00:03,  1.30it/s] 94% 67/71 [00:49<00:02,  1.44it/s] 96% 68/71 [00:49<00:02,  1.31it/s] 97% 69/71 [00:50<00:01,  1.43it/s] 99% 70/71 [00:51<00:00,  1.29it/s]100% 71/71 [00:51<00:00,  1.62it/s]100% 71/71 [00:51<00:00,  1.37it/s]
  0% 0/71 [00:00<?, ?it/s]/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
  1% 1/71 [00:00<01:05,  1.07it/s]  3% 2/71 [00:01<00:48,  1.41it/s]  4% 3/71 [00:02<00:56,  1.21it/s]  6% 4/71 [00:02<00:47,  1.40it/s]  7% 5/71 [00:03<00:53,  1.23it/s]  8% 6/71 [00:04<00:46,  1.39it/s] 10% 7/71 [00:05<00:50,  1.26it/s] 11% 8/71 [00:06<00:44,  1.40it/s] 13% 9/71 [00:06<00:48,  1.28it/s] 14% 10/71 [00:07<00:43,  1.41it/s] 15% 11/71 [00:08<00:46,  1.28it/s] 17% 12/71 [00:08<00:42,  1.40it/s] 18% 13/71 [00:09<00:44,  1.29it/s] 20% 14/71 [00:10<00:40,  1.41it/s] 21% 15/71 [00:11<00:43,  1.28it/s] 23% 16/71 [00:11<00:39,  1.41it/s] 24% 17/71 [00:12<00:41,  1.29it/s] 25% 18/71 [00:13<00:37,  1.42it/s] 27% 19/71 [00:14<00:40,  1.30it/s] 28% 20/71 [00:14<00:35,  1.44it/s] 30% 21/71 [00:15<00:38,  1.31it/s] 31% 22/71 [00:16<00:33,  1.45it/s] 32% 23/71 [00:17<00:36,  1.31it/s] 34% 24/71 [00:17<00:32,  1.43it/s] 35% 25/71 [00:18<00:35,  1.31it/s] 37% 26/71 [00:19<00:31,  1.43it/s] 38% 27/71 [00:20<00:33,  1.30it/s] 39% 28/71 [00:20<00:30,  1.42it/s] 41% 29/71 [00:21<00:32,  1.30it/s] 42% 30/71 [00:22<00:28,  1.42it/s] 44% 31/71 [00:23<00:31,  1.29it/s] 45% 32/71 [00:23<00:27,  1.42it/s] 46% 33/71 [00:24<00:29,  1.30it/s] 48% 34/71 [00:25<00:25,  1.44it/s] 49% 35/71 [00:26<00:27,  1.31it/s] 51% 36/71 [00:26<00:24,  1.43it/s] 52% 37/71 [00:27<00:26,  1.29it/s] 54% 38/71 [00:28<00:23,  1.42it/s] 55% 39/71 [00:29<00:24,  1.29it/s] 56% 40/71 [00:29<00:21,  1.41it/s] 58% 41/71 [00:30<00:23,  1.27it/s] 59% 42/71 [00:31<00:20,  1.40it/s] 61% 43/71 [00:32<00:21,  1.28it/s] 62% 44/71 [00:32<00:19,  1.41it/s] 63% 45/71 [00:33<00:20,  1.30it/s] 65% 46/71 [00:34<00:17,  1.42it/s] 66% 47/71 [00:34<00:18,  1.30it/s] 68% 48/71 [00:35<00:16,  1.42it/s] 69% 49/71 [00:36<00:16,  1.30it/s] 70% 50/71 [00:36<00:14,  1.43it/s] 72% 51/71 [00:37<00:15,  1.30it/s] 73% 52/71 [00:38<00:13,  1.42it/s] 75% 53/71 [00:39<00:13,  1.29it/s] 76% 54/71 [00:39<00:12,  1.42it/s] 77% 55/71 [00:40<00:12,  1.31it/s] 79% 56/71 [00:41<00:10,  1.44it/s] 80% 57/71 [00:42<00:10,  1.31it/s] 82% 58/71 [00:42<00:09,  1.43it/s] 83% 59/71 [00:43<00:09,  1.30it/s] 85% 60/71 [00:44<00:07,  1.44it/s] 86% 61/71 [00:45<00:07,  1.32it/s] 87% 62/71 [00:45<00:06,  1.45it/s] 89% 63/71 [00:46<00:06,  1.31it/s] 90% 64/71 [00:47<00:04,  1.44it/s] 92% 65/71 [00:48<00:04,  1.32it/s] 93% 66/71 [00:48<00:03,  1.45it/s] 94% 67/71 [00:49<00:03,  1.31it/s] 96% 68/71 [00:50<00:02,  1.44it/s] 97% 69/71 [00:51<00:01,  1.32it/s] 99% 70/71 [00:51<00:00,  1.44it/s]100% 71/71 [00:52<00:00,  1.48it/s]100% 71/71 [00:52<00:00,  1.36it/s]
/home/agmo/DaClinNLP/src/dataclass.py:24: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  sample = {key: torch.tensor(val[index]) for key, val in self.inputs.items()}
wandb: Waiting for W&B process to finish... (success).
wandb: - 0.020 MB of 0.020 MB uploaded (0.000 MB deduped)wandb: \ 0.020 MB of 0.020 MB uploaded (0.000 MB deduped)wandb: | 0.020 MB of 0.020 MB uploaded (0.000 MB deduped)wandb: / 0.020 MB of 0.020 MB uploaded (0.000 MB deduped)wandb: - 0.020 MB of 0.719 MB uploaded (0.000 MB deduped)wandb: \ 0.020 MB of 0.719 MB uploaded (0.000 MB deduped)wandb: | 0.020 MB of 0.719 MB uploaded (0.000 MB deduped)wandb: / 0.516 MB of 0.719 MB uploaded (0.000 MB deduped)wandb: - 0.719 MB of 0.719 MB uploaded (0.000 MB deduped)wandb: \ 0.719 MB of 0.719 MB uploaded (0.000 MB deduped)wandb: | 0.719 MB of 0.719 MB uploaded (0.000 MB deduped)wandb: / 0.719 MB of 0.719 MB uploaded (0.000 MB deduped)wandb: - 0.719 MB of 0.719 MB uploaded (0.000 MB deduped)wandb: \ 0.719 MB of 0.719 MB uploaded (0.000 MB deduped)wandb: | 0.719 MB of 0.719 MB uploaded (0.000 MB deduped)wandb: / 0.719 MB of 0.719 MB uploaded (0.000 MB deduped)wandb: - 0.719 MB of 0.719 MB uploaded (0.000 MB deduped)wandb: \ 0.719 MB of 0.719 MB uploaded (0.000 MB deduped)wandb:                                                                                
wandb: 
wandb: Run history:
wandb:            Val F1 blocks ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÇ‚ñÇ‚ñÇ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÑ‚ñÖ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÖ‚ñÖ‚ñÑ‚ñÑ‚ñÑ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÜ‚ñÜ‚ñá‚ñÜ‚ñá‚ñá‚ñà‚ñá
wandb:          Val F1 chapters ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñà‚ñá‚ñá‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
wandb:        Val Flat total F1 ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÉ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñà‚ñá‚ñá‚ñà‚ñà‚ñà‚ñà‚ñá‚ñà‚ñà‚ñà‚ñá‚ñà‚ñà‚ñà‚ñà
wandb: Val Flat total precision ‚ñÅ‚ñÅ‚ñÅ‚ñÇ‚ñÖ‚ñÜ‚ñÜ‚ñá‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
wandb:    Val Flat total recall ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÉ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñÜ‚ñÜ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñà‚ñá‚ñà‚ñà‚ñà‚ñà
wandb:     Val Precision blocks ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÇ‚ñÉ‚ñÇ‚ñÉ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñà‚ñá‚ñÜ‚ñá‚ñá‚ñÜ‚ñá‚ñá‚ñá‚ñà‚ñà‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñà‚ñà‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá
wandb:   Val Precision chapters ‚ñÅ‚ñÅ‚ñÅ‚ñà‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá
wandb:        Val Recall blocks ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÇ‚ñÇ‚ñÇ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÑ‚ñÖ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÖ‚ñÖ‚ñÑ‚ñÑ‚ñÑ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÖ‚ñÜ‚ñÜ‚ñá‚ñÜ‚ñÜ‚ñá‚ñà‚ñá
wandb:      Val Recall chapters ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÉ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñÜ‚ñÜ‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñá‚ñà‚ñà‚ñá‚ñá‚ñá‚ñà‚ñà‚ñá‚ñà‚ñà‚ñà‚ñà‚ñá‚ñà‚ñà‚ñà‚ñá‚ñà‚ñà‚ñà‚ñà
wandb:                 Val loss ‚ñà‚ñà‚ñà‚ñá‚ñÜ‚ñÜ‚ñÖ‚ñÑ‚ñÉ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÇ‚ñÅ‚ñÇ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ
wandb: 
wandb: Run summary:
wandb:                F1 blocks 0.0806
wandb:              F1 chapters 0.73122
wandb:                  F1 flat 0.47189
wandb:         Precision blocks 0.7619
wandb:       Precision chapters 0.84556
wandb:           Precision flat 0.83929
wandb:            Recall blocks 0.04255
wandb:          Recall chapters 0.64412
wandb:              Recall flat 0.32821
wandb:                Test loss 8e-05
wandb:            Val F1 blocks 0.13793
wandb:          Val F1 chapters 0.72318
wandb:        Val Flat total F1 0.48171
wandb: Val Flat total precision 0.82292
wandb:    Val Flat total recall 0.34052
wandb:     Val Precision blocks 0.75676
wandb:   Val Precision chapters 0.83267
wandb:        Val Recall blocks 0.07588
wandb:      Val Recall chapters 0.63914
wandb:                 Val loss 8e-05
wandb: 
wandb: Synced radiant-durian-15: https://wandb.ai/hrmussa/icd_coding/runs/3pruvycy
wandb: Synced 6 W&B file(s), 1 media file(s), 0 artifact file(s) and 0 other file(s)
wandb: Find logs at: ./wandb/run-20220724_223122-3pruvycy/logs
